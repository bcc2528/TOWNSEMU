/* LICENSE>>
Copyright 2020 Soji Yamakawa (CaptainYS, http://www.ysflight.com)

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

<< LICENSE */
#include <iostream>

#include "cpputil.h"
#include "i486.h"
#include "i486inst.h"
#include "i486debug.h"
#include "i486symtable.h"
#include "i486loadsegreg.h"

// #define VERIFY_MEMORY_WINDOW
// #define BREAK_ON_FPU_INST


/*static*/ unsigned short i486DXCommon::opCodeRenumberTable[I486_OPCODE_MAX+1];
/*static*/ unsigned char i486DXCommon::opCodeNeedOperandTable[I486_OPCODE_MAX+1];

void i486DXCommon::MakeOpCodeRenumberTable(void)
{
	for(auto &renum : opCodeRenumberTable)
	{
		renum=I486_RENUMBER_REALLY_UNDEFINED;
	}

	opCodeRenumberTable[I486_OPCODE_UNDEFINED_SHOOT_INT6]=I486_RENUMBER_UNDEFINED_SHOOT_INT6;
	opCodeRenumberTable[I486_OPCODE_UNDEFINED_SHOOT_INT6_WIN31]=I486_RENUMBER_UNDEFINED_SHOOT_INT6_WIN31;
	opCodeRenumberTable[I486_OPCODE_C0_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_I8]=I486_RENUMBER_C0_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_I8;
	opCodeRenumberTable[I486_OPCODE_C1_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_I8]=I486_RENUMBER_C1_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_I8;
	opCodeRenumberTable[I486_OPCODE_D0_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_1]=I486_RENUMBER_D0_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_1;
	opCodeRenumberTable[I486_OPCODE_D1_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_1]=I486_RENUMBER_D1_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_1;
	opCodeRenumberTable[I486_OPCODE_D2_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_CL]=I486_RENUMBER_D2_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_CL;
	opCodeRenumberTable[I486_OPCODE_D3_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_CL]=I486_RENUMBER_D3_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_CL;
	opCodeRenumberTable[I486_OPCODE_F6_TEST_NOT_NEG_MUL_IMUL_DIV_IDIV]=I486_RENUMBER_F6_TEST_NOT_NEG_MUL_IMUL_DIV_IDIV;
	opCodeRenumberTable[I486_OPCODE_F7_TEST_NOT_NEG_MUL_IMUL_DIV_IDIV]=I486_RENUMBER_F7_TEST_NOT_NEG_MUL_IMUL_DIV_IDIV;
	opCodeRenumberTable[I486_OPCODE_INC_DEC_R_M8]=I486_RENUMBER_INC_DEC_R_M8;
	opCodeRenumberTable[I486_OPCODE_INC_DEC_CALL_CALLF_JMP_JMPF_PUSH ]=I486_RENUMBER_INC_DEC_CALL_CALLF_JMP_JMPF_PUSH;
	opCodeRenumberTable[I486_OPCODE_LGDT_LIDT_SGDT_SIDT]=I486_RENUMBER_LGDT_LIDT_SGDT_SIDT;
	opCodeRenumberTable[I486_OPCODE_AAA]=I486_RENUMBER_AAA;
	opCodeRenumberTable[I486_OPCODE_AAM]=I486_RENUMBER_AAM;
	opCodeRenumberTable[I486_OPCODE_AAD]=I486_RENUMBER_AAD;
	opCodeRenumberTable[I486_OPCODE_AAS]=I486_RENUMBER_AAS;
	opCodeRenumberTable[I486_OPCODE_ARPL]=I486_RENUMBER_ARPL;
	opCodeRenumberTable[I486_OPCODE_BOUND]=I486_RENUMBER_BOUND;
	opCodeRenumberTable[I486_OPCODE_BT_BTS_BTR_BTC_RM_I8]=I486_RENUMBER_BT_BTS_BTR_BTC_RM_I8;
	opCodeRenumberTable[I486_OPCODE_BSF_R_RM]=I486_RENUMBER_BSF_R_RM;
	opCodeRenumberTable[I486_OPCODE_BSR_R_RM]=I486_RENUMBER_BSR_R_RM;
	opCodeRenumberTable[I486_OPCODE_BT_R_RM]=I486_RENUMBER_BT_R_RM;
	opCodeRenumberTable[I486_OPCODE_BTC_RM_R]=I486_RENUMBER_BTC_RM_R;
	opCodeRenumberTable[I486_OPCODE_BTS_RM_R]=I486_RENUMBER_BTS_RM_R;
	opCodeRenumberTable[I486_OPCODE_BTR_RM_R]=I486_RENUMBER_BTR_RM_R;
	opCodeRenumberTable[I486_OPCODE_LAR]=I486_RENUMBER_LAR;
	opCodeRenumberTable[I486_OPCODE_CALL_REL]=I486_RENUMBER_CALL_REL;
	opCodeRenumberTable[I486_OPCODE_CALL_FAR]=I486_RENUMBER_CALL_FAR;
	opCodeRenumberTable[I486_OPCODE_CLC]=I486_RENUMBER_CLC;
	opCodeRenumberTable[I486_OPCODE_CLD]=I486_RENUMBER_CLD;
	opCodeRenumberTable[I486_OPCODE_CLI]=I486_RENUMBER_CLI;
	opCodeRenumberTable[I486_OPCODE_CLTS]=I486_RENUMBER_CLTS;
	opCodeRenumberTable[I486_OPCODE_CMC]=I486_RENUMBER_CMC;
	opCodeRenumberTable[I486_OPCODE_ADC_AL_FROM_I8]=I486_RENUMBER_ADC_AL_FROM_I8;
	opCodeRenumberTable[I486_OPCODE_ADC_A_FROM_I]=I486_RENUMBER_ADC_A_FROM_I;
	opCodeRenumberTable[I486_OPCODE_ADC_RM8_FROM_R8]=I486_RENUMBER_ADC_RM8_FROM_R8;
	opCodeRenumberTable[I486_OPCODE_ADC_RM_FROM_R]=I486_RENUMBER_ADC_RM_FROM_R;
	opCodeRenumberTable[I486_OPCODE_ADC_R8_FROM_RM8]=I486_RENUMBER_ADC_R8_FROM_RM8;
	opCodeRenumberTable[I486_OPCODE_ADC_R_FROM_RM]=I486_RENUMBER_ADC_R_FROM_RM;
	opCodeRenumberTable[I486_OPCODE_ADD_AL_FROM_I8]=I486_RENUMBER_ADD_AL_FROM_I8;
	opCodeRenumberTable[I486_OPCODE_ADD_A_FROM_I]=I486_RENUMBER_ADD_A_FROM_I;
	opCodeRenumberTable[I486_OPCODE_ADD_RM8_FROM_R8]=I486_RENUMBER_ADD_RM8_FROM_R8;
	opCodeRenumberTable[I486_OPCODE_ADD_RM_FROM_R]=I486_RENUMBER_ADD_RM_FROM_R;
	opCodeRenumberTable[I486_OPCODE_ADD_R8_FROM_RM8]=I486_RENUMBER_ADD_R8_FROM_RM8;
	opCodeRenumberTable[I486_OPCODE_ADD_R_FROM_RM]=I486_RENUMBER_ADD_R_FROM_RM;
	opCodeRenumberTable[I486_OPCODE_AND_AL_FROM_I8]=I486_RENUMBER_AND_AL_FROM_I8;
	opCodeRenumberTable[I486_OPCODE_AND_A_FROM_I]=I486_RENUMBER_AND_A_FROM_I;
	opCodeRenumberTable[I486_OPCODE_AND_RM8_FROM_R8]=I486_RENUMBER_AND_RM8_FROM_R8;
	opCodeRenumberTable[I486_OPCODE_AND_RM_FROM_R]=I486_RENUMBER_AND_RM_FROM_R;
	opCodeRenumberTable[I486_OPCODE_AND_R8_FROM_RM8]=I486_RENUMBER_AND_R8_FROM_RM8;
	opCodeRenumberTable[I486_OPCODE_AND_R_FROM_RM]=I486_RENUMBER_AND_R_FROM_RM;
	opCodeRenumberTable[I486_OPCODE_CBW_CWDE]=I486_RENUMBER_CBW_CWDE;
	opCodeRenumberTable[I486_OPCODE_CWD_CDQ]=I486_RENUMBER_CWD_CDQ;
	opCodeRenumberTable[I486_OPCODE_CMP_AL_FROM_I8]=I486_RENUMBER_CMP_AL_FROM_I8;
	opCodeRenumberTable[I486_OPCODE_CMP_A_FROM_I]=I486_RENUMBER_CMP_A_FROM_I;
	opCodeRenumberTable[I486_OPCODE_CMP_RM8_FROM_R8]=I486_RENUMBER_CMP_RM8_FROM_R8;
	opCodeRenumberTable[I486_OPCODE_CMP_RM_FROM_R]=I486_RENUMBER_CMP_RM_FROM_R;
	opCodeRenumberTable[I486_OPCODE_CMP_R8_FROM_RM8]=I486_RENUMBER_CMP_R8_FROM_RM8;
	opCodeRenumberTable[I486_OPCODE_CMP_R_FROM_RM]=I486_RENUMBER_CMP_R_FROM_RM;
	opCodeRenumberTable[I486_OPCODE_CMPSB]=I486_RENUMBER_CMPSB;
	opCodeRenumberTable[I486_OPCODE_CMPS]=I486_RENUMBER_CMPS;
	opCodeRenumberTable[I486_OPCODE_DAA]=I486_RENUMBER_DAA;
	opCodeRenumberTable[I486_OPCODE_DAS]=I486_RENUMBER_DAS;
	opCodeRenumberTable[I486_OPCODE_DEC_EAX]=I486_RENUMBER_DEC_EAX;
	opCodeRenumberTable[I486_OPCODE_DEC_ECX]=I486_RENUMBER_DEC_ECX;
	opCodeRenumberTable[I486_OPCODE_DEC_EDX]=I486_RENUMBER_DEC_EDX;
	opCodeRenumberTable[I486_OPCODE_DEC_EBX]=I486_RENUMBER_DEC_EBX;
	opCodeRenumberTable[I486_OPCODE_DEC_ESP]=I486_RENUMBER_DEC_ESP;
	opCodeRenumberTable[I486_OPCODE_DEC_EBP]=I486_RENUMBER_DEC_EBP;
	opCodeRenumberTable[I486_OPCODE_DEC_ESI]=I486_RENUMBER_DEC_ESI;
	opCodeRenumberTable[I486_OPCODE_DEC_EDI]=I486_RENUMBER_DEC_EDI;
	opCodeRenumberTable[I486_OPCODE_ENTER]=I486_RENUMBER_ENTER;
	opCodeRenumberTable[I486_OPCODE_FWAIT]=I486_RENUMBER_FWAIT;
	opCodeRenumberTable[I486_OPCODE_FPU_D8]=I486_RENUMBER_FPU_D8;
	opCodeRenumberTable[I486_OPCODE_FPU_D9]=I486_RENUMBER_FPU_D9;
	opCodeRenumberTable[I486_OPCODE_FPU_DA]=I486_RENUMBER_FPU_DA;
	opCodeRenumberTable[I486_OPCODE_FPU_DB]=I486_RENUMBER_FPU_DB;
	opCodeRenumberTable[I486_OPCODE_FPU_DC]=I486_RENUMBER_FPU_DC;
	opCodeRenumberTable[I486_OPCODE_FPU_DD]=I486_RENUMBER_FPU_DD;
	opCodeRenumberTable[I486_OPCODE_FPU_DE]=I486_RENUMBER_FPU_DE;
	opCodeRenumberTable[I486_OPCODE_FPU_DF]=I486_RENUMBER_FPU_DF;
	opCodeRenumberTable[I486_OPCODE_HLT]=I486_RENUMBER_HLT;
	opCodeRenumberTable[I486_OPCODE_IMUL_R_RM_I8]=I486_RENUMBER_IMUL_R_RM_I8;
	opCodeRenumberTable[I486_OPCODE_IMUL_R_RM_IMM]=I486_RENUMBER_IMUL_R_RM_IMM;
	opCodeRenumberTable[I486_OPCODE_IMUL_R_RM]=I486_RENUMBER_IMUL_R_RM;
	opCodeRenumberTable[I486_OPCODE_INSB]=I486_RENUMBER_INSB;
	opCodeRenumberTable[I486_OPCODE_IN_AL_I8]=I486_RENUMBER_IN_AL_I8;
	opCodeRenumberTable[I486_OPCODE_IN_A_I8]=I486_RENUMBER_IN_A_I8;
	opCodeRenumberTable[I486_OPCODE_IN_AL_DX]=I486_RENUMBER_IN_AL_DX;
	opCodeRenumberTable[I486_OPCODE_IN_A_DX]=I486_RENUMBER_IN_A_DX;
	opCodeRenumberTable[I486_OPCODE_INC_EAX]=I486_RENUMBER_INC_EAX;
	opCodeRenumberTable[I486_OPCODE_INC_ECX]=I486_RENUMBER_INC_ECX;
	opCodeRenumberTable[I486_OPCODE_INC_EDX]=I486_RENUMBER_INC_EDX;
	opCodeRenumberTable[I486_OPCODE_INC_EBX]=I486_RENUMBER_INC_EBX;
	opCodeRenumberTable[I486_OPCODE_INC_ESP]=I486_RENUMBER_INC_ESP;
	opCodeRenumberTable[I486_OPCODE_INC_EBP]=I486_RENUMBER_INC_EBP;
	opCodeRenumberTable[I486_OPCODE_INC_ESI]=I486_RENUMBER_INC_ESI;
	opCodeRenumberTable[I486_OPCODE_INC_EDI]=I486_RENUMBER_INC_EDI;
	opCodeRenumberTable[I486_OPCODE_INT3]=I486_RENUMBER_INT3;
	opCodeRenumberTable[I486_OPCODE_INT]=I486_RENUMBER_INT;
	opCodeRenumberTable[I486_OPCODE_INTO]=I486_RENUMBER_INTO;
	opCodeRenumberTable[I486_OPCODE_IRET]=I486_RENUMBER_IRET;
	opCodeRenumberTable[I486_OPCODE_JECXZ_REL8]=I486_RENUMBER_JECXZ_REL8;
	opCodeRenumberTable[I486_OPCODE_JA_REL8]=I486_RENUMBER_JA_REL8;
	opCodeRenumberTable[I486_OPCODE_JAE_REL8]=I486_RENUMBER_JAE_REL8;
	opCodeRenumberTable[I486_OPCODE_JB_REL8]=I486_RENUMBER_JB_REL8;
	opCodeRenumberTable[I486_OPCODE_JBE_REL8]=I486_RENUMBER_JBE_REL8;
	opCodeRenumberTable[I486_OPCODE_JE_REL8]=I486_RENUMBER_JE_REL8;
	opCodeRenumberTable[I486_OPCODE_JG_REL8]=I486_RENUMBER_JG_REL8;
	opCodeRenumberTable[I486_OPCODE_JGE_REL8]=I486_RENUMBER_JGE_REL8;
	opCodeRenumberTable[I486_OPCODE_JL_REL8]=I486_RENUMBER_JL_REL8;
	opCodeRenumberTable[I486_OPCODE_JLE_REL8]=I486_RENUMBER_JLE_REL8;
	opCodeRenumberTable[I486_OPCODE_JNE_REL8]=I486_RENUMBER_JNE_REL8;
	opCodeRenumberTable[I486_OPCODE_JNO_REL8]=I486_RENUMBER_JNO_REL8;
	opCodeRenumberTable[I486_OPCODE_JNP_REL8]=I486_RENUMBER_JNP_REL8;
	opCodeRenumberTable[I486_OPCODE_JNS_REL8]=I486_RENUMBER_JNS_REL8;
	opCodeRenumberTable[I486_OPCODE_JO_REL8]=I486_RENUMBER_JO_REL8;
	opCodeRenumberTable[I486_OPCODE_JP_REL8]=I486_RENUMBER_JP_REL8;
	opCodeRenumberTable[I486_OPCODE_JS_REL8]=I486_RENUMBER_JS_REL8;
	opCodeRenumberTable[I486_OPCODE_JA_REL]=I486_RENUMBER_JA_REL;
	opCodeRenumberTable[I486_OPCODE_JAE_REL]=I486_RENUMBER_JAE_REL;
	opCodeRenumberTable[I486_OPCODE_JB_REL]=I486_RENUMBER_JB_REL;
	opCodeRenumberTable[I486_OPCODE_JBE_REL]=I486_RENUMBER_JBE_REL;
	opCodeRenumberTable[I486_OPCODE_JE_REL]=I486_RENUMBER_JE_REL;
	opCodeRenumberTable[I486_OPCODE_JG_REL]=I486_RENUMBER_JG_REL;
	opCodeRenumberTable[I486_OPCODE_JGE_REL]=I486_RENUMBER_JGE_REL;
	opCodeRenumberTable[I486_OPCODE_JL_REL]=I486_RENUMBER_JL_REL;
	opCodeRenumberTable[I486_OPCODE_JLE_REL]=I486_RENUMBER_JLE_REL;
	opCodeRenumberTable[I486_OPCODE_JNE_REL]=I486_RENUMBER_JNE_REL;
	opCodeRenumberTable[I486_OPCODE_JNO_REL]=I486_RENUMBER_JNO_REL;
	opCodeRenumberTable[I486_OPCODE_JNP_REL]=I486_RENUMBER_JNP_REL;
	opCodeRenumberTable[I486_OPCODE_JNS_REL]=I486_RENUMBER_JNS_REL;
	opCodeRenumberTable[I486_OPCODE_JO_REL]=I486_RENUMBER_JO_REL;
	opCodeRenumberTable[I486_OPCODE_JP_REL]=I486_RENUMBER_JP_REL;
	opCodeRenumberTable[I486_OPCODE_JS_REL]=I486_RENUMBER_JS_REL;
	opCodeRenumberTable[I486_OPCODE_JMP_REL8]=I486_RENUMBER_JMP_REL8;
	opCodeRenumberTable[I486_OPCODE_JMP_REL]=I486_RENUMBER_JMP_REL;
	opCodeRenumberTable[I486_OPCODE_JMP_FAR]=I486_RENUMBER_JMP_FAR;
	opCodeRenumberTable[I486_OPCODE_BINARYOP_RM8_FROM_I8]=I486_RENUMBER_BINARYOP_RM8_FROM_I8;
	opCodeRenumberTable[I486_OPCODE_BINARYOP_R_FROM_I]=I486_RENUMBER_BINARYOP_R_FROM_I;
	opCodeRenumberTable[I486_OPCODE_BINARYOP_RM8_FROM_I8_ALIAS]=I486_RENUMBER_BINARYOP_RM8_FROM_I8_ALIAS;
	opCodeRenumberTable[I486_OPCODE_BINARYOP_RM_FROM_SXI8]=I486_RENUMBER_BINARYOP_RM_FROM_SXI8;
	opCodeRenumberTable[I486_OPCODE_LAHF]=I486_RENUMBER_LAHF;
	opCodeRenumberTable[I486_OPCODE_LEA]=I486_RENUMBER_LEA;
	opCodeRenumberTable[I486_OPCODE_LDS]=I486_RENUMBER_LDS;
	opCodeRenumberTable[I486_OPCODE_LSS]=I486_RENUMBER_LSS;
	opCodeRenumberTable[I486_OPCODE_LES]=I486_RENUMBER_LES;
	opCodeRenumberTable[I486_OPCODE_LFS]=I486_RENUMBER_LFS;
	opCodeRenumberTable[I486_OPCODE_LGS]=I486_RENUMBER_LGS;
	opCodeRenumberTable[I486_OPCODE_LEAVE]=I486_RENUMBER_LEAVE;
	opCodeRenumberTable[I486_OPCODE_LODSB]=I486_RENUMBER_LODSB;
	opCodeRenumberTable[I486_OPCODE_LODS]=I486_RENUMBER_LODS;
	opCodeRenumberTable[I486_OPCODE_LOOP]=I486_RENUMBER_LOOP;
	opCodeRenumberTable[I486_OPCODE_LOOPE]=I486_RENUMBER_LOOPE;
	opCodeRenumberTable[I486_OPCODE_LOOPNE]=I486_RENUMBER_LOOPNE;
	opCodeRenumberTable[I486_OPCODE_LSL]=I486_RENUMBER_LSL;
	opCodeRenumberTable[I486_OPCODE_MOV_FROM_R8]=I486_RENUMBER_MOV_FROM_R8;
	opCodeRenumberTable[I486_OPCODE_MOV_FROM_R]=I486_RENUMBER_MOV_FROM_R;
	opCodeRenumberTable[I486_OPCODE_MOV_TO_R8]=I486_RENUMBER_MOV_TO_R8;
	opCodeRenumberTable[I486_OPCODE_MOV_TO_R]=I486_RENUMBER_MOV_TO_R;
	opCodeRenumberTable[I486_OPCODE_MOV_FROM_SEG]=I486_RENUMBER_MOV_FROM_SEG;
	opCodeRenumberTable[I486_OPCODE_MOV_TO_SEG]=I486_RENUMBER_MOV_TO_SEG;
	opCodeRenumberTable[I486_OPCODE_MOV_M_TO_AL]=I486_RENUMBER_MOV_M_TO_AL;
	opCodeRenumberTable[I486_OPCODE_MOV_M_TO_EAX]=I486_RENUMBER_MOV_M_TO_EAX;
	opCodeRenumberTable[I486_OPCODE_MOV_M_FROM_AL]=I486_RENUMBER_MOV_M_FROM_AL;
	opCodeRenumberTable[I486_OPCODE_MOV_M_FROM_EAX]=I486_RENUMBER_MOV_M_FROM_EAX;
	opCodeRenumberTable[I486_OPCODE_MOV_I8_TO_AL]=I486_RENUMBER_MOV_I8_TO_AL;
	opCodeRenumberTable[I486_OPCODE_MOV_I8_TO_CL]=I486_RENUMBER_MOV_I8_TO_CL;
	opCodeRenumberTable[I486_OPCODE_MOV_I8_TO_DL]=I486_RENUMBER_MOV_I8_TO_DL;
	opCodeRenumberTable[I486_OPCODE_MOV_I8_TO_BL]=I486_RENUMBER_MOV_I8_TO_BL;
	opCodeRenumberTable[I486_OPCODE_MOV_I8_TO_AH]=I486_RENUMBER_MOV_I8_TO_AH;
	opCodeRenumberTable[I486_OPCODE_MOV_I8_TO_CH]=I486_RENUMBER_MOV_I8_TO_CH;
	opCodeRenumberTable[I486_OPCODE_MOV_I8_TO_DH]=I486_RENUMBER_MOV_I8_TO_DH;
	opCodeRenumberTable[I486_OPCODE_MOV_I8_TO_BH]=I486_RENUMBER_MOV_I8_TO_BH;
	opCodeRenumberTable[I486_OPCODE_MOV_I_TO_EAX]=I486_RENUMBER_MOV_I_TO_EAX;
	opCodeRenumberTable[I486_OPCODE_MOV_I_TO_ECX]=I486_RENUMBER_MOV_I_TO_ECX;
	opCodeRenumberTable[I486_OPCODE_MOV_I_TO_EDX]=I486_RENUMBER_MOV_I_TO_EDX;
	opCodeRenumberTable[I486_OPCODE_MOV_I_TO_EBX]=I486_RENUMBER_MOV_I_TO_EBX;
	opCodeRenumberTable[I486_OPCODE_MOV_I_TO_ESP]=I486_RENUMBER_MOV_I_TO_ESP;
	opCodeRenumberTable[I486_OPCODE_MOV_I_TO_EBP]=I486_RENUMBER_MOV_I_TO_EBP;
	opCodeRenumberTable[I486_OPCODE_MOV_I_TO_ESI]=I486_RENUMBER_MOV_I_TO_ESI;
	opCodeRenumberTable[I486_OPCODE_MOV_I_TO_EDI]=I486_RENUMBER_MOV_I_TO_EDI;
	opCodeRenumberTable[I486_OPCODE_MOV_I8_TO_RM8]=I486_RENUMBER_MOV_I8_TO_RM8;
	opCodeRenumberTable[I486_OPCODE_MOV_I_TO_RM]=I486_RENUMBER_MOV_I_TO_RM;
	opCodeRenumberTable[I486_OPCODE_MOV_TO_CR]=I486_RENUMBER_MOV_TO_CR;
	opCodeRenumberTable[I486_OPCODE_MOV_FROM_CR]=I486_RENUMBER_MOV_FROM_CR;
	opCodeRenumberTable[I486_OPCODE_MOV_FROM_DR]=I486_RENUMBER_MOV_FROM_DR;
	opCodeRenumberTable[I486_OPCODE_MOV_TO_DR]=I486_RENUMBER_MOV_TO_DR;
	opCodeRenumberTable[I486_OPCODE_MOV_FROM_TR]=I486_RENUMBER_MOV_FROM_TR;
	opCodeRenumberTable[I486_OPCODE_MOV_TO_TR]=I486_RENUMBER_MOV_TO_TR;
	opCodeRenumberTable[I486_OPCODE_MOVSB]=I486_RENUMBER_MOVSB;
	opCodeRenumberTable[I486_OPCODE_MOVS]=I486_RENUMBER_MOVS;
	opCodeRenumberTable[I486_OPCODE_MOVSX_R_RM8]=I486_RENUMBER_MOVSX_R_RM8;
	opCodeRenumberTable[I486_OPCODE_MOVSX_R32_RM16]=I486_RENUMBER_MOVSX_R32_RM16;
	opCodeRenumberTable[I486_OPCODE_MOVZX_R_RM8]=I486_RENUMBER_MOVZX_R_RM8;
	opCodeRenumberTable[I486_OPCODE_MOVZX_R32_RM16]=I486_RENUMBER_MOVZX_R32_RM16;
	opCodeRenumberTable[I486_OPCODE_NOP]=I486_RENUMBER_NOP;
	opCodeRenumberTable[I486_OPCODE_OUT_I8_AL]=I486_RENUMBER_OUT_I8_AL;
	opCodeRenumberTable[I486_OPCODE_OUT_I8_A]=I486_RENUMBER_OUT_I8_A;
	opCodeRenumberTable[I486_OPCODE_OUT_DX_AL]=I486_RENUMBER_OUT_DX_AL;
	opCodeRenumberTable[I486_OPCODE_OUT_DX_A]=I486_RENUMBER_OUT_DX_A;
	opCodeRenumberTable[I486_OPCODE_OUTSB]=I486_RENUMBER_OUTSB;
	opCodeRenumberTable[I486_OPCODE_OUTS]=I486_RENUMBER_OUTS;
	opCodeRenumberTable[I486_OPCODE_PUSHA]=I486_RENUMBER_PUSHA;
	opCodeRenumberTable[I486_OPCODE_PUSHF]=I486_RENUMBER_PUSHF;
	opCodeRenumberTable[I486_OPCODE_PUSH_EAX]=I486_RENUMBER_PUSH_EAX;
	opCodeRenumberTable[I486_OPCODE_PUSH_ECX]=I486_RENUMBER_PUSH_ECX;
	opCodeRenumberTable[I486_OPCODE_PUSH_EDX]=I486_RENUMBER_PUSH_EDX;
	opCodeRenumberTable[I486_OPCODE_PUSH_EBX]=I486_RENUMBER_PUSH_EBX;
	opCodeRenumberTable[I486_OPCODE_PUSH_ESP]=I486_RENUMBER_PUSH_ESP;
	opCodeRenumberTable[I486_OPCODE_PUSH_EBP]=I486_RENUMBER_PUSH_EBP;
	opCodeRenumberTable[I486_OPCODE_PUSH_ESI]=I486_RENUMBER_PUSH_ESI;
	opCodeRenumberTable[I486_OPCODE_PUSH_EDI]=I486_RENUMBER_PUSH_EDI;
	opCodeRenumberTable[I486_OPCODE_PUSH_I8]=I486_RENUMBER_PUSH_I8;
	opCodeRenumberTable[I486_OPCODE_PUSH_I]=I486_RENUMBER_PUSH_I;
	opCodeRenumberTable[I486_OPCODE_PUSH_CS]=I486_RENUMBER_PUSH_CS;
	opCodeRenumberTable[I486_OPCODE_PUSH_SS]=I486_RENUMBER_PUSH_SS;
	opCodeRenumberTable[I486_OPCODE_PUSH_DS]=I486_RENUMBER_PUSH_DS;
	opCodeRenumberTable[I486_OPCODE_PUSH_ES]=I486_RENUMBER_PUSH_ES;
	opCodeRenumberTable[I486_OPCODE_PUSH_FS]=I486_RENUMBER_PUSH_FS;
	opCodeRenumberTable[I486_OPCODE_PUSH_GS]=I486_RENUMBER_PUSH_GS;
	opCodeRenumberTable[I486_OPCODE_POP_M]=I486_RENUMBER_POP_M;
	opCodeRenumberTable[I486_OPCODE_POP_EAX]=I486_RENUMBER_POP_EAX;
	opCodeRenumberTable[I486_OPCODE_POP_ECX]=I486_RENUMBER_POP_ECX;
	opCodeRenumberTable[I486_OPCODE_POP_EDX]=I486_RENUMBER_POP_EDX;
	opCodeRenumberTable[I486_OPCODE_POP_EBX]=I486_RENUMBER_POP_EBX;
	opCodeRenumberTable[I486_OPCODE_POP_ESP]=I486_RENUMBER_POP_ESP;
	opCodeRenumberTable[I486_OPCODE_POP_EBP]=I486_RENUMBER_POP_EBP;
	opCodeRenumberTable[I486_OPCODE_POP_ESI]=I486_RENUMBER_POP_ESI;
	opCodeRenumberTable[I486_OPCODE_POP_EDI]=I486_RENUMBER_POP_EDI;
	opCodeRenumberTable[I486_OPCODE_POP_SS]=I486_RENUMBER_POP_SS;
	opCodeRenumberTable[I486_OPCODE_POP_DS]=I486_RENUMBER_POP_DS;
	opCodeRenumberTable[I486_OPCODE_POP_ES]=I486_RENUMBER_POP_ES;
	opCodeRenumberTable[I486_OPCODE_POP_FS]=I486_RENUMBER_POP_FS;
	opCodeRenumberTable[I486_OPCODE_POP_GS]=I486_RENUMBER_POP_GS;
	opCodeRenumberTable[I486_OPCODE_POPA]=I486_RENUMBER_POPA;
	opCodeRenumberTable[I486_OPCODE_POPF]=I486_RENUMBER_POPF;
	opCodeRenumberTable[I486_OPCODE_OR_AL_FROM_I8]=I486_RENUMBER_OR_AL_FROM_I8;
	opCodeRenumberTable[I486_OPCODE_OR_A_FROM_I]=I486_RENUMBER_OR_A_FROM_I;
	opCodeRenumberTable[I486_OPCODE_OR_RM8_FROM_R8]=I486_RENUMBER_OR_RM8_FROM_R8;
	opCodeRenumberTable[I486_OPCODE_OR_RM_FROM_R]=I486_RENUMBER_OR_RM_FROM_R;
	opCodeRenumberTable[I486_OPCODE_OR_R8_FROM_RM8]=I486_RENUMBER_OR_R8_FROM_RM8;
	opCodeRenumberTable[I486_OPCODE_OR_R_FROM_RM]=I486_RENUMBER_OR_R_FROM_RM;
	opCodeRenumberTable[I486_OPCODE_RET]=I486_RENUMBER_RET;
	opCodeRenumberTable[I486_OPCODE_RETF]=I486_RENUMBER_RETF;
	opCodeRenumberTable[I486_OPCODE_RET_I16]=I486_RENUMBER_RET_I16;
	opCodeRenumberTable[I486_OPCODE_RETF_I16]=I486_RENUMBER_RETF_I16;
	opCodeRenumberTable[I486_OPCODE_SAHF]=I486_RENUMBER_SAHF;
	opCodeRenumberTable[I486_OPCODE_SHLD_RM_I8]=I486_RENUMBER_SHLD_RM_I8;
	opCodeRenumberTable[I486_OPCODE_SHLD_RM_CL]=I486_RENUMBER_SHLD_RM_CL;
	opCodeRenumberTable[I486_OPCODE_SHRD_RM_I8]=I486_RENUMBER_SHRD_RM_I8;
	opCodeRenumberTable[I486_OPCODE_SHRD_RM_CL]=I486_RENUMBER_SHRD_RM_CL;
	opCodeRenumberTable[I486_OPCODE_SCASB]=I486_RENUMBER_SCASB;
	opCodeRenumberTable[I486_OPCODE_SCAS]=I486_RENUMBER_SCAS;
	opCodeRenumberTable[I486_OPCODE_SETA]=I486_RENUMBER_SETA;
	opCodeRenumberTable[I486_OPCODE_SETAE]=I486_RENUMBER_SETAE;
	opCodeRenumberTable[I486_OPCODE_SETB]=I486_RENUMBER_SETB;
	opCodeRenumberTable[I486_OPCODE_SETBE]=I486_RENUMBER_SETBE;
	opCodeRenumberTable[I486_OPCODE_SETE]=I486_RENUMBER_SETE;
	opCodeRenumberTable[I486_OPCODE_SETG]=I486_RENUMBER_SETG;
	opCodeRenumberTable[I486_OPCODE_SETGE]=I486_RENUMBER_SETGE;
	opCodeRenumberTable[I486_OPCODE_SETL]=I486_RENUMBER_SETL;
	opCodeRenumberTable[I486_OPCODE_SETLE]=I486_RENUMBER_SETLE;
	opCodeRenumberTable[I486_OPCODE_SETNE]=I486_RENUMBER_SETNE;
	opCodeRenumberTable[I486_OPCODE_SETNO]=I486_RENUMBER_SETNO;
	opCodeRenumberTable[I486_OPCODE_SETNP]=I486_RENUMBER_SETNP;
	opCodeRenumberTable[I486_OPCODE_SETNS]=I486_RENUMBER_SETNS;
	opCodeRenumberTable[I486_OPCODE_SETO]=I486_RENUMBER_SETO;
	opCodeRenumberTable[I486_OPCODE_SETP]=I486_RENUMBER_SETP;
	opCodeRenumberTable[I486_OPCODE_SETS]=I486_RENUMBER_SETS;
	opCodeRenumberTable[I486_OPCODE_SLDT_STR_LLDT_LTR_VERR_VERW]=I486_RENUMBER_SLDT_STR_LLDT_LTR_VERR_VERW;
	opCodeRenumberTable[I486_OPCODE_STC]=I486_RENUMBER_STC;
	opCodeRenumberTable[I486_OPCODE_STD]=I486_RENUMBER_STD;
	opCodeRenumberTable[I486_OPCODE_STI]=I486_RENUMBER_STI;
	opCodeRenumberTable[I486_OPCODE_STOSB]=I486_RENUMBER_STOSB;
	opCodeRenumberTable[I486_OPCODE_STOS]=I486_RENUMBER_STOS;
	opCodeRenumberTable[I486_OPCODE_SBB_AL_FROM_I8]=I486_RENUMBER_SBB_AL_FROM_I8;
	opCodeRenumberTable[I486_OPCODE_SBB_A_FROM_I]=I486_RENUMBER_SBB_A_FROM_I;
	opCodeRenumberTable[I486_OPCODE_SBB_RM8_FROM_R8]=I486_RENUMBER_SBB_RM8_FROM_R8;
	opCodeRenumberTable[I486_OPCODE_SBB_RM_FROM_R]=I486_RENUMBER_SBB_RM_FROM_R;
	opCodeRenumberTable[I486_OPCODE_SBB_R8_FROM_RM8]=I486_RENUMBER_SBB_R8_FROM_RM8;
	opCodeRenumberTable[I486_OPCODE_SBB_R_FROM_RM]=I486_RENUMBER_SBB_R_FROM_RM;
	opCodeRenumberTable[I486_OPCODE_SUB_AL_FROM_I8]=I486_RENUMBER_SUB_AL_FROM_I8;
	opCodeRenumberTable[I486_OPCODE_SUB_A_FROM_I]=I486_RENUMBER_SUB_A_FROM_I;
	opCodeRenumberTable[I486_OPCODE_SUB_RM8_FROM_R8]=I486_RENUMBER_SUB_RM8_FROM_R8;
	opCodeRenumberTable[I486_OPCODE_SUB_RM_FROM_R]=I486_RENUMBER_SUB_RM_FROM_R;
	opCodeRenumberTable[I486_OPCODE_SUB_R8_FROM_RM8]=I486_RENUMBER_SUB_R8_FROM_RM8;
	opCodeRenumberTable[I486_OPCODE_SUB_R_FROM_RM]=I486_RENUMBER_SUB_R_FROM_RM;
	opCodeRenumberTable[I486_OPCODE_TEST_AL_FROM_I8]=I486_RENUMBER_TEST_AL_FROM_I8;
	opCodeRenumberTable[I486_OPCODE_TEST_A_FROM_I]=I486_RENUMBER_TEST_A_FROM_I;
	opCodeRenumberTable[I486_OPCODE_TEST_RM8_FROM_R8]=I486_RENUMBER_TEST_RM8_FROM_R8;
	opCodeRenumberTable[I486_OPCODE_TEST_RM_FROM_R]=I486_RENUMBER_TEST_RM_FROM_R;
	opCodeRenumberTable[I486_OPCODE_XCHG_EAX_ECX]=I486_RENUMBER_XCHG_EAX_ECX;
	opCodeRenumberTable[I486_OPCODE_XCHG_EAX_EDX]=I486_RENUMBER_XCHG_EAX_EDX;
	opCodeRenumberTable[I486_OPCODE_XCHG_EAX_EBX]=I486_RENUMBER_XCHG_EAX_EBX;
	opCodeRenumberTable[I486_OPCODE_XCHG_EAX_ESP]=I486_RENUMBER_XCHG_EAX_ESP;
	opCodeRenumberTable[I486_OPCODE_XCHG_EAX_EBP]=I486_RENUMBER_XCHG_EAX_EBP;
	opCodeRenumberTable[I486_OPCODE_XCHG_EAX_ESI]=I486_RENUMBER_XCHG_EAX_ESI;
	opCodeRenumberTable[I486_OPCODE_XCHG_EAX_EDI]=I486_RENUMBER_XCHG_EAX_EDI;
	opCodeRenumberTable[I486_OPCODE_XCHG_RM8_R8]=I486_RENUMBER_XCHG_RM8_R8;
	opCodeRenumberTable[I486_OPCODE_XCHG_RM_R]=I486_RENUMBER_XCHG_RM_R;
	opCodeRenumberTable[I486_OPCODE_XLAT]=I486_RENUMBER_XLAT;
	opCodeRenumberTable[I486_OPCODE_XOR_AL_FROM_I8]=I486_RENUMBER_XOR_AL_FROM_I8;
	opCodeRenumberTable[I486_OPCODE_XOR_A_FROM_I]=I486_RENUMBER_XOR_A_FROM_I;
	opCodeRenumberTable[I486_OPCODE_XOR_RM8_FROM_R8]=I486_RENUMBER_XOR_RM8_FROM_R8;
	opCodeRenumberTable[I486_OPCODE_XOR_RM_FROM_R]=I486_RENUMBER_XOR_RM_FROM_R;
	opCodeRenumberTable[I486_OPCODE_XOR_R8_FROM_RM8]=I486_RENUMBER_XOR_R8_FROM_RM8;
	opCodeRenumberTable[I486_OPCODE_XOR_R_FROM_RM]=I486_RENUMBER_XOR_R_FROM_RM;
	opCodeRenumberTable[I486_OPCODE_BSWAP_EAX]=I486_RENUMBER_BSWAP_EAX;
	opCodeRenumberTable[I486_OPCODE_BSWAP_ECX]=I486_RENUMBER_BSWAP_ECX;
	opCodeRenumberTable[I486_OPCODE_BSWAP_EDX]=I486_RENUMBER_BSWAP_EDX;
	opCodeRenumberTable[I486_OPCODE_BSWAP_EBX]=I486_RENUMBER_BSWAP_EBX;
	opCodeRenumberTable[I486_OPCODE_BSWAP_ESP]=I486_RENUMBER_BSWAP_ESP;
	opCodeRenumberTable[I486_OPCODE_BSWAP_EBP]=I486_RENUMBER_BSWAP_EBP;
	opCodeRenumberTable[I486_OPCODE_BSWAP_ESI]=I486_RENUMBER_BSWAP_ESI;
	opCodeRenumberTable[I486_OPCODE_BSWAP_EDI]=I486_RENUMBER_BSWAP_EDI;

	for(auto &i : opCodeNeedOperandTable)
	{
		i=0;
	}

	opCodeNeedOperandTable[I486_OPCODE_UNDEFINED_SHOOT_INT6]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_AAA]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_AAS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_CBW_CWDE]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_CWD_CDQ]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_CLC]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_CLD]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_CLI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_CMC]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_CLTS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_CMPSB]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_CMPS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_DAA]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_DAS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_DEC_EAX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_DEC_ECX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_DEC_EDX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_DEC_EBX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_DEC_ESP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_DEC_EBP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_DEC_ESI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_DEC_EDI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_FWAIT]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INSB]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_IN_AL_DX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_IN_A_DX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_LEAVE]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_HLT]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INC_EAX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INC_ECX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INC_EDX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INC_EBX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INC_ESP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INC_EBP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INC_ESI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INC_EDI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_IRET]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INT3]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_INTO]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_LAHF]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_LODSB]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_LODS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_MOVSB]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_MOVS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_NOP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_OUT_DX_AL]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_OUT_DX_A]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_OUTSB]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_OUTS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSHA]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSHF]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_EAX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_ECX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_EDX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_EBX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_ESP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_EBP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_ESI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_EDI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_CS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_SS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_DS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_ES]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_FS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_GS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_EAX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_ECX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_EDX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_EBX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_ESP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_EBP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_ESI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_EDI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_SS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_DS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_ES]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_FS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POP_GS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POPA]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_POPF]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_RET]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_RETF]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_SAHF]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_SCASB]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_SCAS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_STC]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_STD]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_STI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_STOSB]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_STOS]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_XCHG_EAX_ECX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_XCHG_EAX_EDX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_XCHG_EAX_EBX]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_XCHG_EAX_ESP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_XCHG_EAX_EBP]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_XCHG_EAX_ESI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_XCHG_EAX_EDI]=I486_NEEDOPERAND_NONE;
	opCodeNeedOperandTable[I486_OPCODE_XLAT]=I486_NEEDOPERAND_NONE;


	// RM_IMM8
	opCodeNeedOperandTable[I486_OPCODE_C0_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_I8]=I486_NEEDOPERAND_RM_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_BINARYOP_RM8_FROM_I8]=I486_NEEDOPERAND_RM_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_BINARYOP_RM8_FROM_I8_ALIAS]=I486_NEEDOPERAND_RM_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I8_TO_RM8]=I486_NEEDOPERAND_RM_IMM8;


	// RM_IMM
	opCodeNeedOperandTable[I486_OPCODE_C1_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_I8]=I486_NEEDOPERAND_RM_IMM;
	opCodeNeedOperandTable[I486_OPCODE_BT_BTS_BTR_BTC_RM_I8]=I486_NEEDOPERAND_RM_IMM;
	opCodeNeedOperandTable[I486_OPCODE_BINARYOP_RM_FROM_SXI8]=I486_NEEDOPERAND_RM_IMM;


	// RM8
	opCodeNeedOperandTable[I486_OPCODE_D0_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_1]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_D2_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_CL]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_INC_DEC_R_M8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_MOV_FROM_R8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_ADC_RM8_FROM_R8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_ADD_RM8_FROM_R8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_AND_RM8_FROM_R8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_CMP_RM8_FROM_R8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_OR_RM8_FROM_R8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_SBB_RM8_FROM_R8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_SUB_RM8_FROM_R8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_TEST_RM8_FROM_R8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_XOR_RM8_FROM_R8]=I486_NEEDOPERAND_RM8;
	opCodeNeedOperandTable[I486_OPCODE_XCHG_RM8_R8]=I486_NEEDOPERAND_RM8;


	// RM_X
	opCodeNeedOperandTable[I486_OPCODE_D1_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_1]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_D3_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_CL]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_INC_DEC_CALL_CALLF_JMP_JMPF_PUSH]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_MOV_FROM_R]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_POP_M]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_ADC_RM_FROM_R]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_ADD_RM_FROM_R]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_AND_RM_FROM_R]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_CMP_RM_FROM_R]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_OR_RM_FROM_R]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_SBB_RM_FROM_R]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_SUB_RM_FROM_R]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_TEST_RM_FROM_R]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_XOR_RM_FROM_R]=I486_NEEDOPERAND_RM_X;
	opCodeNeedOperandTable[I486_OPCODE_XCHG_RM_R]=I486_NEEDOPERAND_RM_X;

	// RM_R
	opCodeNeedOperandTable[I486_OPCODE_BT_R_RM]=I486_NEEDOPERAND_BT_R_RM;
	opCodeNeedOperandTable[I486_OPCODE_BTC_RM_R]=I486_NEEDOPERAND_BTC_RM_R;
	opCodeNeedOperandTable[I486_OPCODE_BTS_RM_R]=I486_NEEDOPERAND_BTS_RM_R;
	opCodeNeedOperandTable[I486_OPCODE_BTR_RM_R]=I486_NEEDOPERAND_BTR_RM_R;
	opCodeNeedOperandTable[I486_OPCODE_SHLD_RM_CL]=I486_NEEDOPERAND_SHLD_RM_CL;
	opCodeNeedOperandTable[I486_OPCODE_SHRD_RM_CL]=I486_NEEDOPERAND_SHRD_RM_CL;


	// IMM8
	opCodeNeedOperandTable[I486_OPCODE_AAD]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_AAM]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_IN_AL_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_IN_A_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_INT]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JMP_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JO_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JNO_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JB_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JAE_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JE_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JECXZ_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JNE_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JBE_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JA_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JS_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JNS_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JP_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JNP_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JL_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JGE_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JLE_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_JG_REL8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_LOOP]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_LOOPE]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_LOOPNE]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I8_TO_AL]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I8_TO_CL]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I8_TO_DL]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I8_TO_BL]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I8_TO_AH]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I8_TO_CH]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I8_TO_DH]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I8_TO_BH]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_OUT_I8_AL]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_OUT_I8_A]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_ADC_AL_FROM_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_ADD_AL_FROM_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_AND_AL_FROM_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_CMP_AL_FROM_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_OR_AL_FROM_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_SBB_AL_FROM_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_SUB_AL_FROM_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_TEST_AL_FROM_I8]=I486_NEEDOPERAND_IMM8;
	opCodeNeedOperandTable[I486_OPCODE_XOR_AL_FROM_I8]=I486_NEEDOPERAND_IMM8;


	// IMM
	opCodeNeedOperandTable[I486_OPCODE_JA_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JAE_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JB_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JBE_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JE_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JG_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JGE_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JL_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JLE_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JNE_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JNO_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JNP_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JNS_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JO_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JP_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JS_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_CALL_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_JMP_REL]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I_TO_EAX]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I_TO_ECX]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I_TO_EDX]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I_TO_EBX]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I_TO_ESP]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I_TO_EBP]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I_TO_ESI]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I_TO_EDI]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_PUSH_I]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_ADC_A_FROM_I]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_ADD_A_FROM_I]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_AND_A_FROM_I]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_CMP_A_FROM_I]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_OR_A_FROM_I]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_SBB_A_FROM_I]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_SUB_A_FROM_I]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_TEST_A_FROM_I]=I486_NEEDOPERAND_IMM;
	opCodeNeedOperandTable[I486_OPCODE_XOR_A_FROM_I]=I486_NEEDOPERAND_IMM;


	// R_RM(Will be integrated with X_RM)
	opCodeNeedOperandTable[I486_OPCODE_BSF_R_RM]=I486_NEEDOPERAND_BSF_R_RM;
	opCodeNeedOperandTable[I486_OPCODE_BSR_R_RM]=I486_NEEDOPERAND_BSR_R_RM;
	opCodeNeedOperandTable[I486_OPCODE_LAR]=I486_NEEDOPERAND_LAR;
	opCodeNeedOperandTable[I486_OPCODE_IMUL_R_RM]=I486_NEEDOPERAND_IMUL_R_RM;
	opCodeNeedOperandTable[I486_OPCODE_LEA]=I486_NEEDOPERAND_LEA;
	opCodeNeedOperandTable[I486_OPCODE_LSL]=I486_NEEDOPERAND_LSL;

	// X_RM
	opCodeNeedOperandTable[I486_OPCODE_ADC_R_FROM_RM]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_ADD_R_FROM_RM]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_AND_R_FROM_RM]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_CMP_R_FROM_RM]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_OR_R_FROM_RM]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_SBB_R_FROM_RM]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_SUB_R_FROM_RM]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_XOR_R_FROM_RM]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_BOUND]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_MOV_TO_R]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_LDS]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_LSS]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_LES]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_LFS]=I486_NEEDOPERAND_X_RM;
	opCodeNeedOperandTable[I486_OPCODE_LGS]=I486_NEEDOPERAND_X_RM;

	// X_RM8
	opCodeNeedOperandTable[I486_OPCODE_MOV_TO_R8]=I486_NEEDOPERAND_X_RM8;
	opCodeNeedOperandTable[I486_OPCODE_ADC_R8_FROM_RM8]=I486_NEEDOPERAND_X_RM8;
	opCodeNeedOperandTable[I486_OPCODE_ADD_R8_FROM_RM8]=I486_NEEDOPERAND_X_RM8;
	opCodeNeedOperandTable[I486_OPCODE_AND_R8_FROM_RM8]=I486_NEEDOPERAND_X_RM8;
	opCodeNeedOperandTable[I486_OPCODE_CMP_R8_FROM_RM8]=I486_NEEDOPERAND_X_RM8;
	opCodeNeedOperandTable[I486_OPCODE_OR_R8_FROM_RM8]=I486_NEEDOPERAND_X_RM8;
	opCodeNeedOperandTable[I486_OPCODE_SBB_R8_FROM_RM8]=I486_NEEDOPERAND_X_RM8;
	opCodeNeedOperandTable[I486_OPCODE_SUB_R8_FROM_RM8]=I486_NEEDOPERAND_X_RM8;
	opCodeNeedOperandTable[I486_OPCODE_XOR_R8_FROM_RM8]=I486_NEEDOPERAND_X_RM8;
	opCodeNeedOperandTable[I486_OPCODE_MOVSX_R_RM8]=I486_NEEDOPERAND_X_RM8;
	opCodeNeedOperandTable[I486_OPCODE_MOVZX_R_RM8]=I486_NEEDOPERAND_X_RM8;

	// FAR_PTR
	opCodeNeedOperandTable[I486_OPCODE_CALL_FAR]=I486_NEEDOPERAND_FARPTR;
	opCodeNeedOperandTable[I486_OPCODE_JMP_FAR]=I486_NEEDOPERAND_FARPTR;

	// RM_I
	opCodeNeedOperandTable[I486_OPCODE_BINARYOP_R_FROM_I]=I486_NEEDOPERAND_BINARYOP_R_FROM_I;
	opCodeNeedOperandTable[I486_OPCODE_MOV_I_TO_RM]=I486_NEEDOPERAND_MOV_I_TO_RM;

	// MOV_I_A
	opCodeNeedOperandTable[I486_OPCODE_MOV_M_TO_AL]=I486_NEEDOPERAND_MOV_M_TO_AL;
	opCodeNeedOperandTable[I486_OPCODE_MOV_M_TO_EAX]=I486_NEEDOPERAND_MOV_M_TO_EAX;
	opCodeNeedOperandTable[I486_OPCODE_MOV_M_FROM_AL]=I486_NEEDOPERAND_MOV_M_FROM_AL;
	opCodeNeedOperandTable[I486_OPCODE_MOV_M_FROM_EAX]=I486_NEEDOPERAND_MOV_M_FROM_EAX;

	// R32_RM16
	opCodeNeedOperandTable[I486_OPCODE_MOVSX_R32_RM16]=I486_NEEDOPERAND_MOVSX_R32_RM16;
	opCodeNeedOperandTable[I486_OPCODE_MOVZX_R32_RM16]=I486_NEEDOPERAND_MOVZX_R32_RM16;

	// I16
	opCodeNeedOperandTable[I486_OPCODE_RET_I16]=I486_NEEDOPERAND_RET_I16;
	opCodeNeedOperandTable[I486_OPCODE_RETF_I16]=I486_NEEDOPERAND_RETF_I16;

	// RM_I8
	opCodeNeedOperandTable[I486_OPCODE_SHLD_RM_I8]=I486_NEEDOPERAND_SHLD_RM_I8;
	opCodeNeedOperandTable[I486_OPCODE_SHRD_RM_I8]=I486_NEEDOPERAND_SHRD_RM_I8;

	// RM8
	opCodeNeedOperandTable[I486_OPCODE_SETA]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETAE]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETB]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETBE]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETE]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETG]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETGE]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETL]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETLE]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETNE]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETNO]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETNP]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETNS]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETO]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETP]=I486_NEEDOPERAND_SETX;
	opCodeNeedOperandTable[I486_OPCODE_SETS]=I486_NEEDOPERAND_SETX;

	// Instruction Specific
	opCodeNeedOperandTable[I486_OPCODE_F6_TEST_NOT_NEG_MUL_IMUL_DIV_IDIV]=I486_NEEDOPERAND_F6_TEST_NOT_NEG_MUL_IMUL_DIV_IDIV;

	opCodeNeedOperandTable[I486_OPCODE_F7_TEST_NOT_NEG_MUL_IMUL_DIV_IDIV]=I486_NEEDOPERAND_F7_TEST_NOT_NEG_MUL_IMUL_DIV_IDIV;

	opCodeNeedOperandTable[I486_OPCODE_ARPL]=I486_NEEDOPERAND_ARPL;

	opCodeNeedOperandTable[I486_OPCODE_ENTER]=I486_NEEDOPERAND_ENTER;

	opCodeNeedOperandTable[I486_OPCODE_FPU_D8]=I486_NEEDOPERAND_FPU_D8;

	opCodeNeedOperandTable[I486_OPCODE_FPU_D9]=I486_NEEDOPERAND_FPU_D9;

	opCodeNeedOperandTable[I486_OPCODE_FPU_DA]=I486_NEEDOPERAND_FPU_DA;

	opCodeNeedOperandTable[I486_OPCODE_FPU_DB]=I486_NEEDOPERAND_FPU_DB;

	opCodeNeedOperandTable[I486_OPCODE_FPU_DC]=I486_NEEDOPERAND_FPU_DC;

	opCodeNeedOperandTable[I486_OPCODE_FPU_DD]=I486_NEEDOPERAND_FPU_DD;

	opCodeNeedOperandTable[I486_OPCODE_FPU_DE]=I486_NEEDOPERAND_FPU_DE;

	opCodeNeedOperandTable[I486_OPCODE_FPU_DF]=I486_NEEDOPERAND_FPU_DF;

	opCodeNeedOperandTable[I486_OPCODE_IMUL_R_RM_I8]=I486_NEEDOPERAND_IMUL_R_RM_I8;

	opCodeNeedOperandTable[I486_OPCODE_IMUL_R_RM_IMM]=I486_NEEDOPERAND_IMUL_R_RM_IMM;

	opCodeNeedOperandTable[I486_OPCODE_LGDT_LIDT_SGDT_SIDT]=I486_NEEDOPERAND_LGDT_LIDT_SGDT_SIDT;

	opCodeNeedOperandTable[I486_OPCODE_MOV_FROM_SEG]=I486_NEEDOPERAND_MOV_FROM_SEG;

	opCodeNeedOperandTable[I486_OPCODE_MOV_TO_SEG]=I486_NEEDOPERAND_MOV_TO_SEG;

	opCodeNeedOperandTable[I486_OPCODE_MOV_TO_CR]=I486_NEEDOPERAND_MOV_TO_CR;

	opCodeNeedOperandTable[I486_OPCODE_MOV_TO_DR]=I486_NEEDOPERAND_MOV_TO_DR;

	opCodeNeedOperandTable[I486_OPCODE_MOV_TO_TR]=I486_NEEDOPERAND_MOV_TO_TR;

	opCodeNeedOperandTable[I486_OPCODE_MOV_FROM_CR]=I486_NEEDOPERAND_MOV_FROM_CR;

	opCodeNeedOperandTable[I486_OPCODE_MOV_FROM_DR]=I486_NEEDOPERAND_MOV_FROM_DR;

	opCodeNeedOperandTable[I486_OPCODE_MOV_FROM_TR]=I486_NEEDOPERAND_MOV_FROM_TR;

	opCodeNeedOperandTable[I486_OPCODE_SLDT_STR_LLDT_LTR_VERR_VERW]=I486_NEEDOPERAND_SLDT_STR_LLDT_LTR_VERR_VERW;


	// Multi-byte and pre-fix handling
	opCodeNeedOperandTable[I486_OPCODE_NEED_SECOND_BYTE]=I486_NEEDOPERAND_NEED_SECOND_BYTE;
	opCodeNeedOperandTable[INST_PREFIX_REP]=I486_NEEDOPERAND_PREFIX_REP; // REP/REPE/REPZ
	opCodeNeedOperandTable[INST_PREFIX_REPNE]=I486_NEEDOPERAND_PREFIX_REPNE;
	opCodeNeedOperandTable[INST_PREFIX_LOCK]=I486_NEEDOPERAND_PREFIX_LOCK;
	opCodeNeedOperandTable[SEG_OVERRIDE_CS]=I486_NEEDOPERAND_SEG_OVERRIDE_CS;
	opCodeNeedOperandTable[SEG_OVERRIDE_SS]=I486_NEEDOPERAND_SEG_OVERRIDE_SS;
	opCodeNeedOperandTable[SEG_OVERRIDE_DS]=I486_NEEDOPERAND_SEG_OVERRIDE_DS;
	opCodeNeedOperandTable[SEG_OVERRIDE_ES]=I486_NEEDOPERAND_SEG_OVERRIDE_ES;
	opCodeNeedOperandTable[SEG_OVERRIDE_FS]=I486_NEEDOPERAND_SEG_OVERRIDE_FS;
	opCodeNeedOperandTable[SEG_OVERRIDE_GS]=I486_NEEDOPERAND_SEG_OVERRIDE_GS;
	opCodeNeedOperandTable[OPSIZE_OVERRIDE]=I486_NEEDOPERAND_OPERSIZE_OVERRIDE;
	opCodeNeedOperandTable[ADDRSIZE_OVERRIDE]=I486_NEEDOPERAND_ADDRSIZE_OVERRIDE;
	opCodeNeedOperandTable[FPU_FWAIT]=I486_NEEDOPERAND_FPU_FWAIT;
}



void i486DXCommon::DebugFetchInstruction(
   MemoryAccess::ConstMemoryWindow &memWin,
   InstructionAndOperand &instOp,
   const SegmentRegister &CS,unsigned int offset,const Memory &mem,unsigned int defOperSize,unsigned int defAddrSize) const
{
	FetchInstructionClass<const i486DXCommon,const Memory,DebugFetchInstructionFunctions,DebugFetchInstructionFunctions>::FetchInstruction(
	    *this,memWin,instOp,CS,offset,mem,defOperSize,defAddrSize);
}

inline void i486DXCommon::DebugFetchOperand8(Instruction &inst,MemoryAccess::ConstPointer &ptr,const SegmentRegister &seg,unsigned int offset,const Memory &mem) const
{
	inst.operand[inst.operandLen++]=DebugFetchByte(inst.codeAddressSize,seg,offset,mem);
	++inst.numBytes;
}
inline void i486DXCommon::DebugPeekOperand8(unsigned int &operand,const Instruction &inst,const MemoryAccess::ConstPointer &ptr,const SegmentRegister &seg,unsigned int offset,const Memory &mem) const
{
	operand=DebugFetchByte(inst.codeAddressSize,seg,offset,mem);
}
inline void i486DXCommon::DebugFetchOperand16(Instruction &inst,MemoryAccess::ConstPointer &ptr,const SegmentRegister &seg,unsigned int offset,const Memory &mem) const
{
	inst.operand[inst.operandLen  ]=DebugFetchByte(inst.codeAddressSize,seg,offset  ,mem);
	inst.operand[inst.operandLen+1]=DebugFetchByte(inst.codeAddressSize,seg,offset+1,mem);
	offset+=2;
	inst.operandLen+=2;
	inst.numBytes+=2;
}
inline void i486DXCommon::DebugFetchOperand32(Instruction &inst,MemoryAccess::ConstPointer &ptr,const SegmentRegister &seg,unsigned int offset,const Memory &mem) const
{
	inst.operand[inst.operandLen  ]=DebugFetchByte(inst.codeAddressSize,seg,offset  ,mem);
	inst.operand[inst.operandLen+1]=DebugFetchByte(inst.codeAddressSize,seg,offset+1,mem);
	inst.operand[inst.operandLen+2]=DebugFetchByte(inst.codeAddressSize,seg,offset+2,mem);
	inst.operand[inst.operandLen+3]=DebugFetchByte(inst.codeAddressSize,seg,offset+3,mem);
	offset+=4;
	inst.operandLen+=4;
	inst.numBytes+=4;
}

inline unsigned int i486DXCommon::DebugFetchOperand16or32(Instruction &inst,MemoryAccess::ConstPointer &ptr,const SegmentRegister &seg,unsigned int offset,const Memory &mem) const
{
	if(16==inst.operandSize)
	{
		DebugFetchOperand16(inst,ptr,seg,offset,mem);
		return 2;
	}
	else // if(32==inst.operandSize)
	{
		DebugFetchOperand32(inst,ptr,seg,offset,mem);
		return 4;
	}
}

inline void i486DXCommon::DebugFetchImm8(Instruction &inst,MemoryAccess::ConstPointer &ptr,const SegmentRegister &seg,unsigned int offset,const Memory &mem) const
{
	inst.imm[0]=DebugFetchByte(inst.codeAddressSize,seg,offset,mem);
	++inst.numBytes;
}
inline void i486DXCommon::DebugFetchImm16(Instruction &inst,MemoryAccess::ConstPointer &ptr,const SegmentRegister &seg,unsigned int offset,const Memory &mem) const
{
	inst.imm[0]=DebugFetchByte(inst.codeAddressSize,seg,offset  ,mem);
	inst.imm[1]=DebugFetchByte(inst.codeAddressSize,seg,offset+1,mem);
	inst.numBytes+=2;
}
inline void i486DXCommon::DebugFetchImm32(Instruction &inst,MemoryAccess::ConstPointer &ptr,const SegmentRegister &seg,unsigned int offset,const Memory &mem) const
{
	inst.imm[0]=DebugFetchByte(inst.codeAddressSize,seg,offset  ,mem);
	inst.imm[1]=DebugFetchByte(inst.codeAddressSize,seg,offset+1,mem);
	inst.imm[2]=DebugFetchByte(inst.codeAddressSize,seg,offset+2,mem);
	inst.imm[3]=DebugFetchByte(inst.codeAddressSize,seg,offset+3,mem);
	inst.numBytes+=4;
}
inline unsigned int i486DXCommon::DebugFetchImm16or32(Instruction &inst,MemoryAccess::ConstPointer &ptr,const SegmentRegister &seg,unsigned int offset,const Memory &mem) const
{
	if(16==inst.operandSize)
	{
		DebugFetchImm16(inst,ptr,seg,offset,mem);
		return 2;
	}
	else // if(32==inst.operandSize)
	{
		DebugFetchImm32(inst,ptr,seg,offset,mem);
		return 4;
	}
}

std::string i486DXCommon::Instruction::SegmentOverrideString(int segOverridePrefix)
{
	switch(segOverridePrefix)
	{
	case SEG_OVERRIDE_CS://  0x2E,
		return "CS:";
	case SEG_OVERRIDE_SS://  0x36,
		return "SS:";
	case SEG_OVERRIDE_DS://  0x3E,
		return "DS:";
	case SEG_OVERRIDE_ES://  0x26,
		return "ES:";
	case SEG_OVERRIDE_FS://  0x64,
		return "FS:";
	case SEG_OVERRIDE_GS://  0x65,
		return "GS:";
	}
	return "";
}

/* static */ std::string i486DXCommon::Instruction::SegmentOverrideSIorESIString(int segOverridePrefix,int addressSize)
{
	if(0==segOverridePrefix)
	{
		return "";
	}
	auto str=SegmentOverrideString(segOverridePrefix);
	switch(addressSize)
	{
	case 16:
		str+="[SI]";
		break;
	case 32:
	default:
		str+="[ESI]";
		break;
	}
	return str;
}

std::string i486DXCommon::Instruction::Disassemble(const Operand &op1In,const Operand &op2In,SegmentRegister cs,unsigned int eip,const i486SymbolTable &symTable,const std::map <unsigned int,std::string> &ioTable) const
{
	std::string disasm;
	Operand op1=op1In,op2=op2In;
	std::string op1SizeQual,op2SizeQual;
	std::string op1SegQual,op2SegQual;

	switch(opCode)
	{
	case I486_OPCODE_UNDEFINED_SHOOT_INT6:
		disasm="UNDEFINED_INSTRUCTION_SHOOT_INT6";
		break;

	case I486_OPCODE_C0_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_I8://=0xC0,// ::ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
	case I486_OPCODE_C1_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_I8:// =0xC1, // ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
	case I486_OPCODE_D0_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_1://=0xD0, // ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
	case I486_OPCODE_D1_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_1://=0xD1, // ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
	case I486_OPCODE_D2_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_CL://0xD2,// ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
	case I486_OPCODE_D3_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_CL://0xD3, // ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
		switch(GetREG())
		{
		case 0:
			disasm="ROL";
			break;
		case 1:
			disasm="ROR";
			break;
		case 2:
			disasm="RCL";
			break;
		case 3:
			disasm="RCR";
			break;
		case 4:
			disasm="SHL";
			break;
		case 5:
			disasm="SHR";
			break;
		case 6:
			disasm=cpputil::Ubtox(opCode)+"?";
			break;
		case 7:
			disasm="SAR";
			break;
		}
		switch(opCode)
		{
		case I486_OPCODE_C0_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_I8://=0xC0,// ::ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
			disasm=DisassembleTypicalRM8_I8(disasm,op1,EvalUimm8(),cs.value,eip,symTable);
			break;
		case I486_OPCODE_C1_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_I8:// =0xC1, // ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
			disasm=DisassembleTypicalRM_I8(disasm,op1,EvalUimm8(),cs.value,eip,symTable);
			break;
		case I486_OPCODE_D0_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_1://=0xD0, // ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
			disasm = DisassembleTypicalOneOperand(disasm, op1, 8,cs.value,eip,symTable) + ",1";
			break;
		case I486_OPCODE_D1_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_1://=0xD1, // ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
			disasm=DisassembleTypicalOneOperand(disasm,op1,operandSize,cs.value,eip,symTable)+",1";
			break;
		case I486_OPCODE_D2_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM8_CL://0xD2,// ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
			disasm = DisassembleTypicalOneOperand(disasm, op1, 8,cs.value,eip,symTable) + ",CL";
			break;
		case I486_OPCODE_D3_ROL_ROR_RCL_RCR_SAL_SAR_SHL_SHR_RM_CL://0xD3, // ROL(REG=0),ROR(REG=1),RCL(REG=2),RCR(REG=3),SAL/SHL(REG=4),SHR(REG=5),SAR(REG=7)
			disasm=DisassembleTypicalOneOperand(disasm,op1,operandSize,cs.value,eip,symTable)+",CL";
			break;
		}
		break;

	case I486_OPCODE_AAA: // 0x37
		disasm="AAA";
		break;

	case I486_OPCODE_AAD://    0xD5,
		if(0x0A==EvalUimm8())
		{
			disasm="AAD";
		}
		else
		{
			disasm=DisassembleTypicalOneImm("AAD",EvalUimm8(),8,cs.value,eip,symTable);
		}
		break;
	case I486_OPCODE_AAM://    0xD4,
		if(0x0A==EvalUimm8())
		{
			disasm="AAM";
		}
		else
		{
			disasm=DisassembleTypicalOneImm("AAM",EvalUimm8(),8,cs.value,eip,symTable);
		}
		break;
	case I486_OPCODE_AAS:
		disasm="AAS";
		break;

	case I486_OPCODE_ARPL://       0x63,
		disasm=DisassembleTypicalTwoOperands("ARPL",op1,op2,cs.value,eip,symTable);
		break;

	case I486_OPCODE_BOUND: // 0x62
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("BOUND",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_BT_BTS_BTR_BTC_RM_I8:// 0FBA
		switch(GetREG())
		{
		case 4:
			disasm="BT";
			break;
		case 5:
			disasm="BTS";
			break;
		case 6:
			disasm="BTR";
			break;
		case 7:
			disasm="BTC";
			break;
		default:
			disasm="?";
			break;
		}
		disasm=DisassembleTypicalRM_I8(disasm,op1,EvalUimm8(),cs.value,eip,symTable);
		break;


	case I486_OPCODE_BSF_R_RM://   0x0FBC,
		disasm=DisassembleTypicalTwoOperands("BSF",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_BSR_R_RM://   0x0FBD,
		disasm=DisassembleTypicalTwoOperands("BSR",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_BT_R_RM://    0x0FA3,
		disasm=DisassembleTypicalTwoOperands("BT",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_BTC_RM_R://   0x0FBB,
		disasm=DisassembleTypicalTwoOperands("BTC",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_BTS_RM_R://   0x0FAB,
		disasm=DisassembleTypicalTwoOperands("BTS",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_BTR_RM_R://   0x0FB3,
		disasm=DisassembleTypicalTwoOperands("BTR",op1,op2,cs.value,eip,symTable);
		break;

	case I486_OPCODE_LAR:  // 0x0F02
		disasm=DisassembleTypicalTwoOperands("LAR",op1,op2,cs.value,eip,symTable);
		break;

	case I486_OPCODE_CALL_REL://   0xE8,
	case I486_OPCODE_JMP_REL://          0xE9,   // cw or cd
		disasm=(I486_OPCODE_JMP_REL==opCode ? "JMP" : "CALL");
		cpputil::ExtendString(disasm,8);
		{
			auto offset=EvalSimm16or32(operandSize);
			auto destin=eip+offset+numBytes;
			if(16==operandSize)
			{
				destin&=0xFFFF;
			}
			disasm+=cpputil::Uitox(destin);

			auto *sym=symTable.Find(cs.value,destin);
			if(nullptr!=sym)
			{
				disasm+=" {"+sym->Format(true,true,true)+"}";
			}
		}
		break;
	case I486_OPCODE_CALL_FAR://   0x9A,
	case I486_OPCODE_JMP_FAR:
		disasm=(I486_OPCODE_JMP_FAR==opCode ? "JMPF" : "CALLF");
		cpputil::ExtendString(disasm,8);
		disasm+=op1.Disassemble(cs.value,eip,symTable);
		{
			auto *sym=symTable.Find(op1.seg,op1.offset);
			if(nullptr!=sym)
			{
				disasm+=" {"+sym->Format(true,true,true)+"}";
			}
		}
		break;


	case I486_OPCODE_F6_TEST_NOT_NEG_MUL_IMUL_DIV_IDIV: //=0xF6
	case I486_OPCODE_F7_TEST_NOT_NEG_MUL_IMUL_DIV_IDIV: //=0xF7,
		switch(GetREG())
		{
		case 0:
			disasm=DisassembleTypicalOneOperandAndImm("TEST",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
			break;
		case 2:
			disasm=DisassembleTypicalOneOperand("NOT",op1,operandSize,cs.value,eip,symTable);
			break;
		case 3:
			disasm=DisassembleTypicalOneOperand("NEG",op1,operandSize,cs.value,eip,symTable);
			break;
		case 4:
			disasm=DisassembleTypicalOneOperand("MUL",op1,operandSize,cs.value,eip,symTable);
			break;
		case 5:
			disasm=DisassembleTypicalOneOperand("IMUL",op1,operandSize,cs.value,eip,symTable);
			break;
		case 6:
			disasm=DisassembleTypicalOneOperand("DIV",op1,operandSize,cs.value,eip,symTable);
			break;
		case 7:
			disasm=DisassembleTypicalOneOperand("IDIV",op1,operandSize,cs.value,eip,symTable);
			break;
		default:
			disasm=DisassembleTypicalOneOperand(cpputil::Ubtox(opCode)+"?",op1,operandSize,cs.value,eip,symTable);
			break;
		}
		break;


	case I486_OPCODE_CBW_CWDE://        0x98,
		disasm=(16==operandSize ? "CBW" : "CWDE");
		break;
	case I486_OPCODE_CWD_CDQ://         0x99,
		disasm=(16==operandSize ? "CWD" : "CDQ");
		break;
	case I486_OPCODE_CLC:
		disasm="CLC";
		break;
	case I486_OPCODE_CLD:
		disasm="CLD";
		break;
	case I486_OPCODE_CLI:
		disasm="CLI";
		break;
	case I486_OPCODE_CLTS:
		disasm="CLTS";
		break;
	case I486_OPCODE_CMC://        0xF5,
		disasm="CMC";
		break;


	case I486_OPCODE_CMPSB://           0xA6,
		disasm="CMPSB   ";
		if(instPrefix==INST_PREFIX_REPE)
		{
			disasm="REPE "+disasm;
		}
		else if(instPrefix==INST_PREFIX_REPNE)
		{
			disasm="REPNE "+disasm;
		}
		disasm+=SegmentOverrideSIorESIString(segOverride,addressSize);
		break;
	case I486_OPCODE_CMPS://            0xA7,
		disasm=(16==operandSize ? "CMPSW   " : "CMPSD   ");
		if(instPrefix==INST_PREFIX_REPE)
		{
			disasm="REPE "+disasm;
		}
		else if(instPrefix==INST_PREFIX_REPNE)
		{
			disasm="REPNE "+disasm;
		}
		disasm+=SegmentOverrideSIorESIString(segOverride,addressSize);
		break;


	case I486_OPCODE_DAA://             0x27,
		disasm="DAA";
		break;
	case I486_OPCODE_DAS://             0x2F,
		disasm="DAS";
		break;


	case I486_OPCODE_ENTER://      0xC8,
		disasm="ENTER   ";
		{
			// Weird operand.
			unsigned int frameSize=operand[0]|(((unsigned int)operand[1])<<8);
			unsigned int level=operand[2];
			disasm+=cpputil::Ustox(frameSize)+"H,";
			disasm+=cpputil::Ubtox(level)+"H";
		}
		break;


	case I486_OPCODE_FWAIT://      0x9B,
		disasm="FWAIT";
		break;

	case I486_OPCODE_FPU_D8: // 0xD8,
		{
			auto MODR_M=operand[0];
			if(0xC0<=MODR_M && MODR_M<=0xC7)
			{
				disasm="FADD  ST,ST(";
				disasm.push_back('0'+(operand[0]&7));
				disasm+=")";
			}
			else if(0xC8==(MODR_M&0xF8))
			{
				disasm="FMUL  ST,ST(";
				disasm.push_back('0'+(operand[0]&7));
				disasm+=")";
			}
			else if(0xD0==(MODR_M&0xF8))
			{
				disasm="FCOM   ST(";
				disasm.push_back('0'+(operand[0]&7));
				disasm+=")";
			}
			else if(0xD8==(MODR_M&0xF8))   // FCOMP
			{
				disasm="FCOMP  ST(";
				disasm.push_back('0'+(operand[0]&7));
				disasm+=")";
			}
			else if(0xE0==(MODR_M&0xF8))   // FSUB ST,STi
			{
				disasm="FSUB   ST,ST(";
				disasm.push_back('0'+(operand[0]&7));
				disasm+=")";
			}
			else if(0xE8==(MODR_M&0xF8))   // FSUBR ST,STi
			{
				disasm="FSUBR  ST,ST(";
				disasm.push_back('0'+(operand[0]&7));
				disasm+=")";
			}
			else if(0xF0==(MODR_M&0xF8))   // FDIV ST,STi
			{
				disasm="FDIV   ST,ST(";
				disasm.push_back('0'+(operand[0]&7));
				disasm+=")";
			}
			else
			{
				switch(GetREG())
				{
				case 0:
					disasm=DisassembleTypicalOneOperand("FADD(m32real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 1:
					disasm=DisassembleTypicalOneOperand("FMUL(m32real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 2:
					disasm=DisassembleTypicalOneOperand("FCOM(m32real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 3:
					disasm=DisassembleTypicalOneOperand("FCOMP(m32real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 4:
					disasm=DisassembleTypicalOneOperand("FSUB(m32real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 5:
					disasm=DisassembleTypicalOneOperand("FSUBR(m32real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 6:
					disasm=DisassembleTypicalOneOperand("FDIV(m32real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 7:
					disasm=DisassembleTypicalOneOperand("FDIVR(m32real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				}
			}
		}
		if(FPU_FWAIT==fwait)
		{
			disasm="FWAIT "+disasm;
		}
		break;

	case I486_OPCODE_FPU_D9:// 0xD9,
		if(0xC0<=operand[0] && operand[0]<=0xC7)
		{
			disasm="FLD ";
			disasm+="ST(";
			disasm.push_back('0'+(operand[0]&7));
			disasm+=")";
		}
		else if(0xC8<=operand[0] && operand[0]<=0xCF)
		{
			disasm="FXCHG ";
			disasm+="ST(";
			disasm.push_back('0'+(operand[0]&7));
			disasm+=")";
		}
		else if(0xD0==operand[0])
		{
			disasm="FNOP";
		}
		else if(0xE0==operand[0])
		{
			disasm="FCHS";
		}
		else if(0xE1==operand[0])
		{
			disasm="FABS";
		}
		else if(0xE4==operand[0])
		{
			disasm="FTST";
		}
		else if(0xE5==operand[0])
		{
			disasm="FXAM";
		}
		else if(0xE8==operand[0])
		{
			disasm="FLD1";
		}
		else if(0xE9==operand[0])
		{
			disasm="FLDL2T";
		}
		else if(0xEA==operand[0])
		{
			disasm="FLDL2E";
		}
		else if(0xEB==operand[0])
		{
			disasm="FLDPI";
		}
		else if(0xEC==operand[0])
		{
			disasm="FLDLG2";
		}
		else if(0xED==operand[0])
		{
			disasm="FLDLN2";
		}
		else if(0xEE==operand[0])
		{
			disasm="FLDZ";
		}
		else if(0xF0==operand[0])
		{
			disasm="F2XM1";
		}
		else if(0xF1==operand[0])
		{
			disasm="FYL2X";
		}
		else if(0xF2==operand[0])
		{
			disasm="FPTAN";
		}
		else if(0xF3==operand[0])
		{
			disasm="FPATAN";
		}
		else if(0xF4==operand[0])
		{
			disasm="FXTRACT";
		}
		else if(0xF5==operand[0])
		{
			disasm="FPREM1";
		}
		else if(0xF6==operand[0])
		{
			disasm="FDECSTP";
		}
		else if(0xF7==operand[0])
		{
			disasm="FINCSTP";
		}
		else if(0xF8==operand[0])
		{
			disasm="FPREM";
		}
		else if(0xF9==operand[0])
		{
			disasm="FYL2XP1";
		}
		else if(0xFA==operand[0])
		{
			disasm="FSQRT";
		}
		else if(0xFB==operand[0])
		{
			disasm="FSINCOS";
		}
		else if(0xFC==operand[0])
		{
			disasm="FRNDINT";
		}
		else if(0xFD==operand[0])
		{
			disasm="FSCALE";
		}
		else if(0xFE==operand[0])
		{
			disasm="FSIN";
		}
		else if(0xFF==operand[0])
		{
			disasm="FCOS";
		}
		else
		{
			switch(GetREG())
			{
			case 0:
				disasm=DisassembleTypicalOneOperand("FLD(m32real)",op1,operandSize,cs.value,eip,symTable);
				break;
			case 2:
				disasm=DisassembleTypicalOneOperand("FST(m32real)",op1,operandSize,cs.value,eip,symTable);
				break;
			case 3:
				disasm=DisassembleTypicalOneOperand("FSTP(m32real)",op1,operandSize,cs.value,eip,symTable);
				break;
			case 4:
				disasm=DisassembleTypicalOneOperand("FLDENV",op1,operandSize,cs.value,eip,symTable);
				break;
			case 5:
				disasm=DisassembleTypicalOneOperand("FLDCW",op1,operandSize,cs.value,eip,symTable);
				break;
			case 6:
				disasm=DisassembleTypicalOneOperand("FNSTENV",op1,operandSize,cs.value,eip,symTable);
				break;
			case 7:
				disasm=DisassembleTypicalOneOperand("FNSTCW",op1,operandSize,cs.value,eip,symTable);
				break;
			default:
				disasm="?FPUINST"+cpputil::Ubtox(opCode)+" "+cpputil::Ubtox(operand[0])+" REG="+cpputil::Ubtox(GetREG());
				break;
			}
		}
		if(FPU_FWAIT==fwait)
		{
			disasm="FWAIT "+disasm;
		}
		break;
	case I486_OPCODE_FPU_DA:
		if(0xE9==operand[0])
		{
			disasm="FUCOMPP";
		}
		else
		{
			switch(Instruction::GetREG(operand[0]))
			{
			case 0:
				disasm=DisassembleTypicalOneOperand("FIADD(m32int)",op1,32,cs.value,eip,symTable);
				break;
			case 1:
				disasm=DisassembleTypicalOneOperand("FIMUL(m32int)",op1,32,cs.value,eip,symTable);
				break;
			case 2:
				disasm=DisassembleTypicalOneOperand("FICOM(m32int)",op1,32,cs.value,eip,symTable);
				break;
			case 3:
				disasm=DisassembleTypicalOneOperand("FICOMP(m32int)",op1,32,cs.value,eip,symTable);
				break;
			case 4:
				disasm=DisassembleTypicalOneOperand("FISUB(m32int)",op1,32,cs.value,eip,symTable);
				break;
			case 5:
				disasm=DisassembleTypicalOneOperand("FISUBR(m32int)",op1,32,cs.value,eip,symTable);
				break;
			case 6:
				disasm=DisassembleTypicalOneOperand("FIDIV(m32int)",op1,32,cs.value,eip,symTable);
				break;
			case 7:
				disasm=DisassembleTypicalOneOperand("FIDIVR(m32int)",op1,32,cs.value,eip,symTable);
				break;
			}
		}
		if(FPU_FWAIT==fwait)
		{
			disasm="FWAIT "+disasm;
		}
		break;
	case I486_OPCODE_FPU_DB://     0xDB, 
		if(0xE3==operand[0])
		{
			disasm="FNINIT";
		}
		else if(0xE4==operand[0])
		{
			disasm="FSETPM (No effect in 80386 and newer)";
		}
		else if(0xE2==operand[0])
		{
			disasm="FCLEX";
		}
		else if(0xE0==operand[0])   // FNENI
		{
			disasm="FNENI";
		}
		else if(0xE1==operand[0])   // FNDISI
		{
			disasm="FNDISI";
		}
		else
		{
			unsigned int MODR_M=operand[0];
			{
				switch(Instruction::GetREG(MODR_M))
				{
				case 0:
					disasm=DisassembleTypicalOneOperand("FILD(m32int)",op1,operandSize,cs.value,eip,symTable);
					break;
				case 2:
					disasm=DisassembleTypicalOneOperand("FIST(m32int)",op1,operandSize,cs.value,eip,symTable);
					break;
				case 3:
					disasm=DisassembleTypicalOneOperand("FISTP(m32int)",op1,operandSize,cs.value,eip,symTable);
					break;
				case 5:
					disasm=DisassembleTypicalOneOperand("FLD(m80real)",op1,operandSize,cs.value,eip,symTable);
					break;
				case 7:
					disasm=DisassembleTypicalOneOperand("FSTP(m80real)",op1,operandSize,cs.value,eip,symTable);
					break;
				default:
					disasm="?FPUINST"+cpputil::Ubtox(opCode)+" "+cpputil::Ubtox(operand[0])+" REG="+cpputil::Ubtox(Instruction::GetREG(MODR_M));
					break;
				}
			}
		}
		if(FPU_FWAIT==fwait)
		{
			disasm="FWAIT "+disasm;
		}
		break;
	case I486_OPCODE_FPU_DC:
		{
			unsigned int MODR_M=operand[0];
			if(0xE8<=MODR_M && MODR_M<=0xEF)
			{
				disasm="FSUB  ST(";
				disasm.push_back('0'+(MODR_M&7));
				disasm+="),ST";
			}
			else if(0xC0<=MODR_M && MODR_M<=0xC7)
			{
				disasm="FADD  ST(";
				disasm.push_back('0'+(MODR_M&7));
				disasm+="),ST";
			}
			else if(0xC8<=MODR_M && MODR_M<=0xCF)
			{
				disasm="FMUL  ST(";
				disasm.push_back('0'+(MODR_M&7));
				disasm+="),ST";
			}
			else
			{
				switch(Instruction::GetREG(MODR_M))
				{
				case 0:	// FADD m64real
					disasm=DisassembleTypicalOneOperand("FADD(m64real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 1:
					disasm=DisassembleTypicalOneOperand("FMUL(m64real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 2: //
					disasm=DisassembleTypicalOneOperand("FCOM(m64real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 3: //
					disasm=DisassembleTypicalOneOperand("FCOMP(m64real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 4:
					disasm=DisassembleTypicalOneOperand("FSUB(m64real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 5:
					disasm=DisassembleTypicalOneOperand("FSUBR(m64real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 6: //
					disasm=DisassembleTypicalOneOperand("FDIV(m64real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				case 7: //
					disasm=DisassembleTypicalOneOperand("FDIVR(m64real)  ",op1,operandSize,cs.value,eip,symTable);
					break;
				default:
					disasm="?FPUINST";
					break;
				}
			}
		}
		if(FPU_FWAIT==fwait)
		{
			disasm="FWAIT "+disasm;
		}
		break;
	case I486_OPCODE_FPU_DD:
		{
			unsigned int MODR_M=operand[0];
			if(0xD0==(MODR_M&0xF8)) // D0 11010xxx    [1] pp.151  0<=i<=7
			{
				disasm = "FST ST(";
				disasm += cpputil::Ubtox(MODR_M & 7);
				disasm += ")";
			}
			else if(0xD8==(MODR_M&0xF8)) // D8 11011xxx
			{
				disasm="FSTP ST(";
				disasm+=cpputil::Ubtox(MODR_M&7);
				disasm+=")";
			}
			else if(0xC0==(MODR_M&0xF8)) // C0 11000xxx
			{
				disasm="FFREE ST(";
				disasm+=cpputil::Ubtox(MODR_M&7);
				disasm+=")";
			}
			else if(0xE0==(MODR_M&0xF8))
			{
				disasm="FUCOM ST(";
				disasm+=cpputil::Ubtox(MODR_M&7);
				disasm+=")";
			}
			else if(0xE8==(MODR_M&0xF8))
			{
				disasm = "FUCOMP ST(";
				disasm += cpputil::Ubtox(MODR_M & 7);
				disasm += ")";
			}
			else
			{
				switch(Instruction::GetREG(MODR_M))
				{
				case 0:	// FLD m64real
					disasm=DisassembleTypicalOneOperand("FLD(m64real)",op1,operandSize,cs.value,eip,symTable);
					break;
				case 1:
					disasm="?FPUINST REG=1";
					break;
				case 2: // FST m64real
					disasm=DisassembleTypicalOneOperand("FST(m64real)",op1,operandSize,cs.value,eip,symTable);
					break;
				case 3: // FSTP m64real
					disasm=DisassembleTypicalOneOperand("FSTP(m64real)",op1,operandSize,cs.value,eip,symTable);
					break;
				case 4:
					disasm=DisassembleTypicalOneOperand("FRSTOR",op1,operandSize,cs.value,eip,symTable);
					break;
				case 5:
					disasm="?FPUINST REG=5";
					break;
				case 6: // FSAVE m94/108byte
					disasm=DisassembleTypicalOneOperand("FSAVE",op1,operandSize,cs.value,eip,symTable);
					break;
				case 7: // FNSTSW m2byte
					disasm=DisassembleTypicalOneOperand("FNSTSW",op1,operandSize,cs.value,eip,symTable);
					break;
				default:
					disasm="?FPUINST";
					break;
				}
			}
		}
		if(FPU_FWAIT==fwait)
		{
			disasm="FWAIT "+disasm;
		}
		break;
	case I486_OPCODE_FPU_DE:
		if(0xC8<=operand[0] && operand[0]<=0xCF)
		{
			disasm="FMULP  ST(";
			disasm.push_back('0'+(operand[0]&7));
			disasm+="),ST";
		}
		else if(0xD9==operand[0])
		{
			disasm="FCOMPP";
		}
		else if(0xC0<=operand[0] && operand[0]<=0xC7)
		{
			disasm="FADDP   ST(";
			disasm.push_back('0'+(operand[0]&7));
			disasm+="),ST";
		}
		else if(0xE0<=operand[0] && operand[0]<=0xE7)
		{
			disasm="FSUBRP  ST(";
			disasm.push_back('0'+(operand[0]&7));
			disasm+="),ST";
		}
		else if(0xE8<=operand[0] && operand[0]<=0xEF)
		{
			disasm="FSUBP   ST(";
			disasm.push_back('0'+(operand[0]&7));
			disasm+="),ST";
		}
		else if(0xF8<=operand[0] && operand[0]<=0xFF)
		{
			disasm="FDIV    ST(";
			disasm.push_back('0'+(operand[0]&7));
			disasm+="),ST";
		}
		else if(0xF0<=operand[0] && operand[0]<=0xF7)
		{
			disasm="FDIVRP  ST(";
			disasm.push_back('0'+(operand[0]&7));
			disasm+="),ST";
		}
		else
		{
			switch(Instruction::GetREG(operand[0]))
			{
			case 0:
				disasm=DisassembleTypicalOneOperand("FIADD(m16int)  ",op1,16,cs.value,eip,symTable);
				break;
			case 1:
				disasm=DisassembleTypicalOneOperand("FIMUL(m16int)  ",op1,16,cs.value,eip,symTable);
				break;
			case 2:
				disasm=DisassembleTypicalOneOperand("FICOM(m16int)  ",op1,16,cs.value,eip,symTable);
				break;
			case 3:
				disasm=DisassembleTypicalOneOperand("FICOMP(m16int)  ",op1,16,cs.value,eip,symTable);
				break;
			case 4:
				disasm=DisassembleTypicalOneOperand("FISUB(m16int)  ",op1,16,cs.value,eip,symTable);
				break;
			case 5:
				disasm=DisassembleTypicalOneOperand("FISUR(m16int)  ",op1,16,cs.value,eip,symTable);
				break;
			case 6:
				disasm=DisassembleTypicalOneOperand("FIDIV(m16int)  ",op1,16,cs.value,eip,symTable);
				break;
			case 7:
				disasm=DisassembleTypicalOneOperand("FIDIVR(m16int)  ",op1,16,cs.value,eip,symTable);
				break;
			default:
				disasm="?FPUINST REG="+cpputil::Ubtox(Instruction::GetREG(operand[0]));;
				break;
			}
		}

		if(FPU_FWAIT==fwait)
		{
			disasm="FWAIT "+disasm;
		}
		break;
	case I486_OPCODE_FPU_DF://  0xDF,
		if(0xE0==operand[0])
		{
			disasm="FNSTSW  AX";
		}
		else
		{
			switch(Instruction::GetREG(operand[0]))
			{
			case 0:
				disasm=DisassembleTypicalOneOperand("FILD(m16int)  ",op1,operandSize,cs.value,eip,symTable);
				break;
			case 2:
				disasm=DisassembleTypicalOneOperand("FIST(m16int)  ",op1,operandSize,cs.value,eip,symTable);
				break;
			case 3:
				disasm=DisassembleTypicalOneOperand("FISTP(m16int)  ",op1,operandSize,cs.value,eip,symTable);
				break;
			case 4:
				disasm=DisassembleTypicalOneOperand("FBLD(m80dec)  ",op1,operandSize,cs.value,eip,symTable);
				break;
			case 5:
				disasm=DisassembleTypicalOneOperand("FILD(m64int)  ",op1,operandSize,cs.value,eip,symTable);
				break;
			case 6: // FBSTP m80dec
				disasm=DisassembleTypicalOneOperand("FBSTP(m80dec)  ",op1,operandSize,cs.value,eip,symTable);
				break;
			case 7: // FISTP m64int
				disasm=DisassembleTypicalOneOperand("FISTP(m64int)  ",op1,operandSize,cs.value,eip,symTable);
				break;
			default:
				disasm="?FPUINST REG="+cpputil::Ubtox(Instruction::GetREG(operand[0]));;
				break;
			}
		}
		if(FPU_FWAIT==fwait)
		{
			disasm="FWAIT "+disasm;
		}
		break;


	case I486_OPCODE_ADC_AL_FROM_I8:
		disasm="ADC     AL,"+cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm8())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm8(),1);
		break;
	case I486_OPCODE_ADC_A_FROM_I:
		if(16==operandSize)
		{
			disasm="ADC     AX,"+cpputil::Ustox(EvalUimm16())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm16())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm16(),2);
		}
		else
		{
			disasm="ADC     EAX,"+cpputil::Uitox(EvalUimm32())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm32())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm32(),4);
		}
		break;
	case I486_OPCODE_ADC_RM8_FROM_R8:
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("ADC",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_ADC_R8_FROM_RM8:
		op1.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("ADC",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_ADC_RM_FROM_R:
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("ADC",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_ADC_R_FROM_RM:
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("ADC",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_ADD_AL_FROM_I8:
		disasm="ADD     AL,"+cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm8())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm8(),1);
		break;
	case I486_OPCODE_ADD_A_FROM_I:
		if(16==operandSize)
		{
			disasm="ADD     AX,"+cpputil::Ustox(EvalUimm16())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm16())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm16(),2);
		}
		else
		{
			disasm="ADD     EAX,"+cpputil::Uitox(EvalUimm32())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm32())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm32(),4);
		}
		break;
	case I486_OPCODE_ADD_RM8_FROM_R8:
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("ADD",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_ADD_R8_FROM_RM8:
		op1.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("ADD",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_ADD_RM_FROM_R:
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("ADD",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_ADD_R_FROM_RM:
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("ADD",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_AND_AL_FROM_I8:
		disasm="AND     AL,"+cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm8())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm8(),1);
		break;
	case I486_OPCODE_AND_A_FROM_I:
		if(16==operandSize)
		{
			disasm="AND     AX,"+cpputil::Ustox(EvalUimm16())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm16())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm16(),2);;
		}
		else
		{
			disasm="AND     EAX,"+cpputil::Uitox(EvalUimm32())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm32())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm32(),4);
		}
		break;
	case I486_OPCODE_AND_RM8_FROM_R8:
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("AND",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_AND_R8_FROM_RM8:
		op1.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("AND",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_AND_RM_FROM_R:
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("AND",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_AND_R_FROM_RM:
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("AND",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_CMP_AL_FROM_I8:
		disasm="CMP     AL,"+cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm8())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm8(),1);
		break;
	case I486_OPCODE_CMP_A_FROM_I:
		if(16==operandSize)
		{
			disasm="CMP     AX,"+cpputil::Ustox(EvalUimm16())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm16())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm16(),2);
		}
		else
		{
			disasm="CMP     EAX,"+cpputil::Uitox(EvalUimm32())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm32())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm32(),4);
		}
		break;
	case I486_OPCODE_CMP_RM8_FROM_R8:
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("CMP",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_CMP_R8_FROM_RM8:
		op1.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("CMP",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_CMP_RM_FROM_R:
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("CMP",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_CMP_R_FROM_RM:
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("CMP",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_SBB_AL_FROM_I8:
		disasm="SBB     AL,"+cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm8())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm8(),1);
		break;
	case I486_OPCODE_SBB_A_FROM_I:
		if(16==operandSize)
		{
			disasm="SBB     AX,"+cpputil::Ustox(EvalUimm16())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm16())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm16(),2);
		}
		else
		{
			disasm="SBB     EAX,"+cpputil::Uitox(EvalUimm32())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm32())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm32(),4);
		}
		break;
	case I486_OPCODE_SBB_RM8_FROM_R8:
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("SBB",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SBB_R8_FROM_RM8:
		op1.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("SBB",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SBB_RM_FROM_R:
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("SBB",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SBB_R_FROM_RM:
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("SBB",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_SUB_AL_FROM_I8:
		disasm="SUB     AL,"+cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm8())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm8(),1);
		break;
	case I486_OPCODE_SUB_A_FROM_I:
		if(16==operandSize)
		{
			disasm="SUB     AX,"+cpputil::Ustox(EvalUimm16())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm16())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm16(),2);
		}
		else
		{
			disasm="SUB     EAX,"+cpputil::Uitox(EvalUimm32())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm32())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm32(),4);
		}
		break;
	case I486_OPCODE_SUB_RM8_FROM_R8:
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("SUB",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SUB_R8_FROM_RM8:
		op1.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("SUB",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SUB_RM_FROM_R:
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("SUB",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SUB_R_FROM_RM:
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("SUB",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_TEST_AL_FROM_I8:
		disasm="TEST    AL,"+cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm8())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm8(),1);
		break;
	case I486_OPCODE_TEST_A_FROM_I:
		if(16==operandSize)
		{
			disasm="TEST    AX,"+cpputil::Ustox(EvalUimm16())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm16())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm16(),2);
		}
		else
		{
			disasm="TEST    EAX,"+cpputil::Uitox(EvalUimm32())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm32())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm32(),4);
		}
		break;
	case I486_OPCODE_TEST_RM8_FROM_R8:
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("TEST",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_TEST_RM_FROM_R:
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("TEST",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_DEC_EAX:
	case I486_OPCODE_DEC_ECX:
	case I486_OPCODE_DEC_EDX:
	case I486_OPCODE_DEC_EBX:
	case I486_OPCODE_DEC_ESP:
	case I486_OPCODE_DEC_EBP:
	case I486_OPCODE_DEC_ESI:
	case I486_OPCODE_DEC_EDI:
		disasm="DEC";
		cpputil::ExtendString(disasm,8);
		if(16==operandSize)
		{
			disasm+=Reg16Str[opCode&7];
		}
		else
		{
			disasm+=Reg32Str[opCode&7];
		}
		break;


	case I486_OPCODE_INSB://     0x6C,
		disasm="INSB";
		if(INST_PREFIX_REP==instPrefix)
		{
			disasm="REP "+disasm;
		}
		else if(INST_PREFIX_REPNE==instPrefix)
		{
			disasm="REPNE(!) "+disasm;
		}
		break;


	case I486_OPCODE_IN_AL_I8://=        0xE4,
		disasm="IN";
		cpputil::ExtendString(disasm,8);
		disasm+="AL,";
		disasm+=cpputil::Ubtox(EvalUimm8())+"H";
		{
			auto found=ioTable.find(EvalUimm8());
			if(ioTable.end()!=found)
			{
				disasm+=" (";
				disasm+=found->second;
				disasm+=")";
			}
		}
		break;
	case I486_OPCODE_IN_A_I8://=         0xE5,
		disasm="IN";
		cpputil::ExtendString(disasm,8);
		if(16==operandSize)
		{
			disasm+="AX,";
		}
		else
		{
			disasm+="EAX,";
		}
		disasm+=cpputil::Ubtox(EvalUimm8())+"H";
		{
			auto found=ioTable.find(EvalUimm8());
			if(ioTable.end()!=found)
			{
				disasm+=" (";
				disasm+=found->second;
				disasm+=")";
			}
		}
		break;
	case I486_OPCODE_IN_AL_DX://=        0xEC,
		disasm="IN      AL,DX";
		break;
	case I486_OPCODE_IN_A_DX://=         0xED,
		if(16==operandSize)
		{
			disasm="IN      AX,DX";
		}
		else
		{
			disasm="IN      EAX,DX";
		}
		break;


	case I486_OPCODE_IMUL_R_RM_I8://0x6B,
		disasm="IMUL    ";
		disasm+=op1.Disassemble(cs.value,eip,symTable)+",";
		disasm+=op2.Disassemble(cs.value,eip,symTable)+",";
		disasm+=cpputil::Itox(EvalSimm8());
		break;
	case I486_OPCODE_IMUL_R_RM_IMM://0x69,
		disasm="IMUL    ";
		disasm+=op1.Disassemble(cs.value,eip,symTable)+",";
		disasm+=op2.Disassemble(cs.value,eip,symTable)+",";
		disasm+=cpputil::Itox(EvalSimm16or32(operandSize));
		break;
	case I486_OPCODE_IMUL_R_RM://       0x0FAF,
		disasm=DisassembleTypicalTwoOperands("IMUL",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_LEAVE://            0xC9,
		disasm="LEAVE";
		break;


	case I486_OPCODE_HLT://        0xF4,
		disasm="HLT";
		break;


	case I486_OPCODE_INC_DEC_R_M8:
		switch(GetREG())
		{
		case 0:
			disasm=DisassembleTypicalOneOperand("INC",op1,8,cs.value,eip,symTable);
			break;
		case 1:
			disasm=DisassembleTypicalOneOperand("DEC",op1,8,cs.value,eip,symTable);
			break;
		}
		break;
	case I486_OPCODE_INC_DEC_CALL_CALLF_JMP_JMPF_PUSH:
		switch(GetREG())
		{
		case 0:
			disasm=DisassembleTypicalOneOperand("INC",op1,operandSize,cs.value,eip,symTable);
			break;
		case 1:
			disasm=DisassembleTypicalOneOperand("DEC",op1,operandSize,cs.value,eip,symTable);
			break;
		case 2:
			disasm=DisassembleTypicalOneOperand("CALL",op1,operandSize,cs.value,eip,symTable);
			break;
		case 3:
			disasm=DisassembleTypicalOneOperand("CALLF",op1,operandSize,cs.value,eip,symTable);
			break;
		case 4:
			disasm=DisassembleTypicalOneOperand("JMP",op1,operandSize,cs.value,eip,symTable);
			break;
		case 5:
			disasm=DisassembleTypicalOneOperand("JMPF",op1,operandSize,cs.value,eip,symTable);
			break;
		case 6:
			disasm=DisassembleTypicalOneOperand("PUSH",op1,operandSize,cs.value,eip,symTable);
			break;
		}
		break;
	case I486_OPCODE_INC_EAX://    0x40, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_INC_ECX://    0x41, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_INC_EDX://    0x42, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_INC_EBX://    0x43, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_INC_ESP://    0x44, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_INC_EBP://    0x45, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_INC_ESI://    0x46, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_INC_EDI://    0x47, // 16/32 depends on OPSIZE_OVERRIDE
		disasm="INC";
		cpputil::ExtendString(disasm,8);
		if(16==operandSize)
		{
			disasm+=Reg16Str[opCode&7];
		}
		else
		{
			disasm+=Reg32Str[opCode&7];
		}
		break;


	case I486_OPCODE_INT3://       0xCC,
		disasm="INT3";
		break;
	case I486_OPCODE_INT://        0xCD,
		disasm = "INT";
		disasm=DisassembleTypicalOneImm(disasm,EvalUimm8(),8,cs.value,eip,symTable);
		if(I486_OPCODE_INT==opCode)
		{
			auto label=symTable.GetINTLabel(EvalUimm8());
			if(""!=label)
			{
				disasm.push_back(' ');
				disasm.push_back('(');
				disasm+=label;
				disasm.push_back(')');
			}
		}
		break;
	case I486_OPCODE_INTO://        0xCE,
		disasm = "INTO";
		break;


	case I486_OPCODE_IRET://   0xCF,
		disasm=(16==operandSize ? "IRET" : "IRETD");
		break;


	case I486_OPCODE_JMP_REL8://         0xEB,   // cb
	case I486_OPCODE_JO_REL8:   // 0x70,
	case I486_OPCODE_JNO_REL8:  // 0x71,
	case I486_OPCODE_JB_REL8:   // 0x72,
	case I486_OPCODE_JAE_REL8:  // 0x73,
	case I486_OPCODE_JE_REL8:   // 0x74,
	case I486_OPCODE_JECXZ_REL8:// 0xE3,  // Depending on the operand size
	case I486_OPCODE_JNE_REL8:  // 0x75,
	case I486_OPCODE_JBE_REL8:  // 0x76,
	case I486_OPCODE_JA_REL8:   // 0x77,
	case I486_OPCODE_JS_REL8:   // 0x78,
	case I486_OPCODE_JNS_REL8:  // 0x79,
	case I486_OPCODE_JP_REL8:   // 0x7A,
	case I486_OPCODE_JNP_REL8:  // 0x7B,
	case I486_OPCODE_JL_REL8:   // 0x7C,
	case I486_OPCODE_JGE_REL8:  // 0x7D,
	case I486_OPCODE_JLE_REL8:  // 0x7E,
	case I486_OPCODE_JG_REL8:   // 0x7F,
	case I486_OPCODE_LOOP://             0xE2,
	case I486_OPCODE_LOOPE://            0xE1,
	case I486_OPCODE_LOOPNE://           0xE0,
		switch(opCode)
		{
		case I486_OPCODE_JMP_REL8://         0xEB,   // cb
			disasm="JMP";
			break;
		case I486_OPCODE_JO_REL8:   // 0x70,
			disasm="JO";
			break;
		case I486_OPCODE_JNO_REL8:  // 0x71,
			disasm="JNO";
			break;
		case I486_OPCODE_JB_REL8:   // 0x72,
			disasm="JB";
			break;
		case I486_OPCODE_JAE_REL8:  // 0x73,
			disasm="JAE";
			break;
		case I486_OPCODE_JE_REL8:   // 0x74,
			disasm="JE";
			break;
		case I486_OPCODE_JECXZ_REL8:// 0xE3,  // Depending on the address size
			disasm=(16==addressSize ? "JCXZ" : "JECXZ");
			break;
		case I486_OPCODE_JNE_REL8:  // 0x75,
			disasm="JNE";
			break;
		case I486_OPCODE_JBE_REL8:  // 0x76,
			disasm="JBE";
			break;
		case I486_OPCODE_JA_REL8:   // 0x77,
			disasm="JA";
			break;
		case I486_OPCODE_JS_REL8:   // 0x78,
			disasm="JS";
			break;
		case I486_OPCODE_JNS_REL8:  // 0x79,
			disasm="JNS";
			break;
		case I486_OPCODE_JP_REL8:   // 0x7A,
			disasm="JP";
			break;
		case I486_OPCODE_JNP_REL8:  // 0x7B,
			disasm="JNP";
			break;
		case I486_OPCODE_JL_REL8:   // 0x7C,
			disasm="JL";
			break;
		case I486_OPCODE_JGE_REL8:  // 0x7D,
			disasm="JGE";
			break;
		case I486_OPCODE_JLE_REL8:  // 0x7E,
			disasm="JLE";
			break;
		case I486_OPCODE_JG_REL8:   // 0x7F,
			disasm="JG";
			break;
		case I486_OPCODE_LOOP://             0xE2,
			disasm="LOOP";
			break;
		case I486_OPCODE_LOOPE://            0xE1,
			disasm="LOOPE";
			break;
		case I486_OPCODE_LOOPNE://           0xE0,
			disasm="LOOPNE";
			break;
		}
		cpputil::ExtendString(disasm,8);
		{
			auto offset=EvalSimm8();
			auto destin=eip+offset+numBytes;
			disasm+=cpputil::Uitox(destin);

			auto *sym=symTable.Find(cs.value,destin);
			if(nullptr!=sym)
			{
				disasm+=" {"+sym->Format(true,true,true)+"}";
			}
		}
		break;


	case I486_OPCODE_JA_REL://    0x0F87,
	case I486_OPCODE_JAE_REL://   0x0F83,
	case I486_OPCODE_JB_REL://    0x0F82,
	case I486_OPCODE_JBE_REL://   0x0F86,
	// case I486_OPCODE_JC_REL://    0x0F82, Same as JB_REL
	case I486_OPCODE_JE_REL://    0x0F84,
	// case I486_OPCODE_JZ_REL://    0x0F84, Same as JZ_REL
	case I486_OPCODE_JG_REL://    0x0F8F,
	case I486_OPCODE_JGE_REL://   0x0F8D,
	case I486_OPCODE_JL_REL://    0x0F8C,
	case I486_OPCODE_JLE_REL://   0x0F8E,
	// case I486_OPCODE_JNA_REL://   0x0F86, Same as JBE_REL
	// case I486_OPCODE_JNAE_REL://  0x0F82, Same as JB_REL
	// case I486_OPCODE_JNB_REL://   0x0F83, Same as JAE_REL
	// case I486_OPCODE_JNBE_REL://  0x0F87, Same as JA_REL
	// case I486_OPCODE_JNC_REL://   0x0F83, Same as JAE_REL
	case I486_OPCODE_JNE_REL://   0x0F85,
	// case I486_OPCODE_JNG_REL://   0x0F8E, Same as JLE_REL
	// case I486_OPCODE_JNGE_REL://  0x0F8C, Same as JL_REL
	// case I486_OPCODE_JNL_REL://   0x0F8D, Same as JGE_REL
	// case I486_OPCODE_JNLE_REL://  0x0F8F, Same as JG_REL
	case I486_OPCODE_JNO_REL://   0x0F81,
	case I486_OPCODE_JNP_REL://   0x0F8B,
	case I486_OPCODE_JNS_REL://   0x0F89,
	// case I486_OPCODE_JNZ_REL://   0x0F85, Same as JNE_REL
	case I486_OPCODE_JO_REL://    0x0F80,
	case I486_OPCODE_JP_REL://    0x0F8A,
	// case I486_OPCODE_JPE_REL://   0x0F8A, Same as JP_REL
	// case I486_OPCODE_JPO_REL://   0x0F8B, Same as JNP_REL
	case I486_OPCODE_JS_REL://    0x0F88,
		switch(opCode)
		{
		case I486_OPCODE_JO_REL:   // 0x70,
			disasm="JO";
			break;
		case I486_OPCODE_JNO_REL:  // 0x71,
			disasm="JNO";
			break;
		case I486_OPCODE_JB_REL:   // 0x72,
			disasm="JB";
			break;
		case I486_OPCODE_JAE_REL:  // 0x73,
			disasm="JAE";
			break;
		case I486_OPCODE_JE_REL:   // 0x74,
			disasm="JE";
			break;
		case I486_OPCODE_JNE_REL:  // 0x75,
			disasm="JNE";
			break;
		case I486_OPCODE_JBE_REL:  // 0x76,
			disasm="JBE";
			break;
		case I486_OPCODE_JA_REL:   // 0x77,
			disasm="JA";
			break;
		case I486_OPCODE_JS_REL:   // 0x78,
			disasm="JS";
			break;
		case I486_OPCODE_JNS_REL:  // 0x79,
			disasm="JNS";
			break;
		case I486_OPCODE_JP_REL:   // 0x7A,
			disasm="JP";
			break;
		case I486_OPCODE_JNP_REL:  // 0x7B,
			disasm="JNP";
			break;
		case I486_OPCODE_JL_REL:   // 0x7C,
			disasm="JL";
			break;
		case I486_OPCODE_JGE_REL:  // 0x7D,
			disasm="JGE";
			break;
		case I486_OPCODE_JLE_REL:  // 0x7E,
			disasm="JLE";
			break;
		case I486_OPCODE_JG_REL:   // 0x7F,
			disasm="JG";
			break;
		default:
			disasm="J?";
			break;
		}
		cpputil::ExtendString(disasm,8);
		{
			auto offset=EvalSimm16or32(operandSize);
			auto destin=eip+offset+numBytes;
			disasm+=cpputil::Uitox(destin);

			auto *sym=symTable.Find(cs.value,destin);
			if(nullptr!=sym)
			{
				disasm+=" {"+sym->Format(true,true,true)+"}";
			}
		}
		break;


	case I486_OPCODE_BINARYOP_RM8_FROM_I8://=  0x80, // AND(REG=4), OR(REG=1), or XOR(REG=6) depends on the REG field of MODR/M
	case I486_OPCODE_BINARYOP_RM8_FROM_I8_ALIAS:
		switch(GetREG())
		{
		case 0:
			disasm=DisassembleTypicalOneOperandAndImm("ADD",op1,EvalUimm8(),8,cs.value,eip,symTable);
			break;
		case 1:
			disasm=DisassembleTypicalOneOperandAndImm("OR",op1,EvalUimm8(),8,cs.value,eip,symTable);
			break;
		case 2:
			disasm=DisassembleTypicalOneOperandAndImm("ADC",op1,EvalUimm8(),8,cs.value,eip,symTable);
			break;
		case 3:
			disasm=DisassembleTypicalOneOperandAndImm("SBB",op1,EvalUimm8(),8,cs.value,eip,symTable);
			break;
		case 4:
			disasm=DisassembleTypicalOneOperandAndImm("AND",op1,EvalUimm8(),8,cs.value,eip,symTable);
			break;
		case 5:
			disasm=DisassembleTypicalOneOperandAndImm("SUB",op1,EvalUimm8(),8,cs.value,eip,symTable);
			break;
		case 6:
			disasm=DisassembleTypicalOneOperandAndImm("XOR",op1,EvalUimm8(),8,cs.value,eip,symTable);
			break;
		case 7:
			disasm=DisassembleTypicalOneOperandAndImm("CMP",op1,EvalUimm8(),8,cs.value,eip,symTable);
			break;
		default:
			disasm=DisassembleTypicalOneOperandAndImm(cpputil::Ubtox(opCode)+"?",op1,EvalUimm8(),8,cs.value,eip,symTable);
			break;
		}
		break;
	case I486_OPCODE_BINARYOP_R_FROM_I://=     0x81,
		switch(GetREG())
		{
		case 0:
			disasm=DisassembleTypicalOneOperandAndImm("ADD",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
			break;
		case 1:
			disasm=DisassembleTypicalOneOperandAndImm("OR",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
			break;
		case 2:
			disasm=DisassembleTypicalOneOperandAndImm("ADC",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
			break;
		case 3:
			disasm=DisassembleTypicalOneOperandAndImm("SBB",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
			break;
		case 4:
			disasm=DisassembleTypicalOneOperandAndImm("AND",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
			break;
		case 5:
			disasm=DisassembleTypicalOneOperandAndImm("SUB",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
			break;
		case 6:
			disasm=DisassembleTypicalOneOperandAndImm("XOR",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
			break;
		case 7:
			disasm=DisassembleTypicalOneOperandAndImm("CMP",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
			break;
		default:
			disasm=DisassembleTypicalOneOperandAndImm(cpputil::Ubtox(opCode)+"?",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
			break;
		}
		break;
	case I486_OPCODE_BINARYOP_RM_FROM_SXI8://= 0x83,
		switch(GetREG())
		{
		case 0:
			disasm=DisassembleTypicalOneOperand("ADD",op1,operandSize,cs.value,eip,symTable);
			break;
		case 1:
			disasm=DisassembleTypicalOneOperand("OR",op1,operandSize,cs.value,eip,symTable);
			break;
		case 2:
			disasm=DisassembleTypicalOneOperand("ADC",op1,operandSize,cs.value,eip,symTable);
			break;
		case 3:
			disasm=DisassembleTypicalOneOperand("SBB",op1,operandSize,cs.value,eip,symTable);
			break;
		case 4:
			disasm=DisassembleTypicalOneOperand("AND",op1,operandSize,cs.value,eip,symTable);
			break;
		case 5:
			disasm=DisassembleTypicalOneOperand("SUB",op1,operandSize,cs.value,eip,symTable);
			break;
		case 6:
			disasm=DisassembleTypicalOneOperand("XOR",op1,operandSize,cs.value,eip,symTable);
			break;
		case 7:
			disasm=DisassembleTypicalOneOperand("CMP",op1,operandSize,cs.value,eip,symTable);
			break;
		default:
			disasm=DisassembleTypicalOneOperand(cpputil::Ubtox(opCode)+"?",op1,operandSize,cs.value,eip,symTable);
			break;
		}
		{
			short imm=EvalUimm8();
			if(0x80&imm)
			{
				imm-=0x100;
				imm=-imm;
				disasm+=",-"+cpputil::Ubtox((unsigned int)imm)+"H";
			}
			else
			{
				disasm+=","+cpputil::Ubtox((unsigned int)imm)+"H";
			}
		}
		break;


	case I486_OPCODE_LAHF://=             0x9F,
		disasm="LAHF";
		break;


	case I486_OPCODE_LEA://=              0x8D,
		disasm="LEA";
		cpputil::ExtendString(disasm,8);
		disasm+=op1.Disassemble(cs.value,eip,symTable);
		disasm.push_back(',');
		if(addressSize!=operandSize)
		{
			disasm+=Operand::GetSizeQualifierToDisassembly(op2,addressSize);
		}
		disasm+=op2.Disassemble(cs.value,eip,symTable);
		break;


	case I486_OPCODE_LDS://              0xC5,
	case I486_OPCODE_LSS://              0x0FB2,
	case I486_OPCODE_LES://              0xC4,
	case I486_OPCODE_LFS://              0x0FB4,
	case I486_OPCODE_LGS://              0x0FB5,
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		switch(opCode)
		{
		case I486_OPCODE_LDS://              0xC5,
			disasm="LDS";
			break;
		case I486_OPCODE_LSS://              0x0FB2,
			disasm="LSS";
			break;
		case I486_OPCODE_LES://              0xC4,
			disasm="LES";
			break;
		case I486_OPCODE_LFS://              0x0FB4,
			disasm="LFS";
			break;
		case I486_OPCODE_LGS://              0x0FB5,
			disasm="LGS";
			break;
		}
		disasm=DisassembleTypicalTwoOperands(disasm,op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_LODSB://            0xAC,
		disasm="LODSB   ";
		disasm+=SegmentOverrideSIorESIString(segOverride,addressSize);
		if(INST_PREFIX_REP==instPrefix)
		{
			disasm="REP "+disasm;
		}
		else if(INST_PREFIX_REPNE==instPrefix)
		{
			disasm="REPNE(!) "+disasm;
		}
		break;
	case I486_OPCODE_LODS://             0xAD,
		disasm=(16==operandSize ? "LODSW   " : "LODSD   ");
		disasm+=SegmentOverrideSIorESIString(segOverride,addressSize);
		if(INST_PREFIX_REP==instPrefix)
		{
			disasm="REP "+disasm;
		}
		else if(INST_PREFIX_REPNE==instPrefix)
		{
			disasm="REPNE(!) "+disasm;
		}
		break;


	case I486_OPCODE_LGDT_LIDT_SGDT_SIDT:
		switch(GetREG())
		{
		case 0:
			disasm=DisassembleTypicalOneOperand("SGDT",op1,16+operandSize,cs.value,eip,symTable);
			break;
		case 1:
			disasm=DisassembleTypicalOneOperand("SIDT",op1,16+operandSize,cs.value,eip,symTable);
			break;
		case 2:
			disasm=DisassembleTypicalOneOperand("LGDT",op1,16+operandSize,cs.value,eip,symTable);
			break;
		case 3:
			disasm=DisassembleTypicalOneOperand("LIDT",op1,16+operandSize,cs.value,eip,symTable);
			break;
		case 4:
			disasm=DisassembleTypicalOneOperand("SMSW",op1,16+operandSize,cs.value,eip,symTable);
			break;
		case 6:
			disasm=DisassembleTypicalOneOperand("LMSW",op1,16+operandSize,cs.value,eip,symTable);
			break;
		case 7:
			disasm=DisassembleTypicalOneOperand("INVLPG",op1,16+operandSize,cs.value,eip,symTable);
			break;
		default:
			disasm=DisassembleTypicalTwoOperands(cpputil::Ubtox(opCode)+"?",op1,op2,cs.value,eip,symTable)+" REG="+cpputil::Ubtox(GetREG());
			break;
		}
		break;


	case I486_OPCODE_LSL://              0x0F03,
		disasm=DisassembleTypicalTwoOperands("LSL",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_MOV_FROM_R8: //      0x88,
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("MOV",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_MOV_FROM_R: //       0x89, // 16/32 depends on OPSIZE_OVERRIDE
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("MOV",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_MOV_TO_R8: //        0x8A,
		op1.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("MOV",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_MOV_TO_R: //         0x8B, // 16/32 depends on OPSIZE_OVERRIDE
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("MOV",op1,op2,cs.value,eip,symTable);
		break;

	case I486_OPCODE_MOV_M_TO_AL: //      0xA0,
		op2.MakeSimpleAddressOffsetFromImm(*this);
		op1.MakeByRegisterNumber(8,REG_AL-REG_8BIT_REG_BASE);
		disasm=DisassembleTypicalTwoOperands("MOV",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_MOV_M_TO_EAX: //     0xA1, // 16/32 depends on OPSIZE_OVERRIDE
		op2.MakeSimpleAddressOffsetFromImm(*this);
		op1.MakeByRegisterNumber(operandSize,REG_AL-REG_8BIT_REG_BASE);
		disasm=DisassembleTypicalTwoOperands("MOV",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_MOV_M_FROM_AL: //    0xA2,
		op1.MakeSimpleAddressOffsetFromImm(*this);
		op2.MakeByRegisterNumber(8,REG_AL-REG_8BIT_REG_BASE);
		disasm=DisassembleTypicalTwoOperands("MOV",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_MOV_M_FROM_EAX: //   0xA3, // 16/32 depends on OPSIZE_OVERRIDE
		op1.MakeSimpleAddressOffsetFromImm(*this);
		op2.MakeByRegisterNumber(operandSize,REG_AL-REG_8BIT_REG_BASE);
		disasm=DisassembleTypicalTwoOperands("MOV",op1,op2,cs.value,eip,symTable);
		break;

	case I486_OPCODE_MOV_FROM_SEG: //     0x8C,
	case I486_OPCODE_MOV_TO_SEG: //       0x8E,

	case I486_OPCODE_MOV_TO_CR://        0x0F22,
	case I486_OPCODE_MOV_FROM_CR://      0x0F20,
	case I486_OPCODE_MOV_FROM_DR://      0x0F21,
	case I486_OPCODE_MOV_TO_DR://        0x0F23,
	case I486_OPCODE_MOV_FROM_TR://      0x0F24,
	case I486_OPCODE_MOV_TO_TR://        0x0F26,
		disasm=DisassembleTypicalTwoOperands("MOV",op1,op2,cs.value,eip,symTable);
		break;

	case I486_OPCODE_MOV_I8_TO_AL: //     0xB0,
	case I486_OPCODE_MOV_I8_TO_CL: //     0xB1,
	case I486_OPCODE_MOV_I8_TO_DL: //     0xB2,
	case I486_OPCODE_MOV_I8_TO_BL: //     0xB3,
	case I486_OPCODE_MOV_I8_TO_AH: //     0xB4,
	case I486_OPCODE_MOV_I8_TO_CH: //     0xB5,
	case I486_OPCODE_MOV_I8_TO_DH: //     0xB6,
	case I486_OPCODE_MOV_I8_TO_BH: //     0xB7,
		op1.MakeByRegisterNumber(8,opCode&7);
		disasm=DisassembleTypicalOneOperandAndImm("MOV",op1,EvalUimm8(),8,cs.value,eip,symTable);
		disasm+=DisassembleIOLabel(cs.value,eip,symTable,ioTable,EvalUimm8());
		break;

	case I486_OPCODE_MOV_I8_TO_RM8: //    0xC6,
		op1.Decode(addressSize,8,operand);
		disasm=DisassembleTypicalOneOperandAndImm("MOV",op1,EvalUimm8(),8,cs.value,eip,symTable);
		disasm+=DisassembleIOLabel(cs.value,eip,symTable,ioTable,EvalUimm8());
		break;
	case I486_OPCODE_MOV_I_TO_RM: //      0xC7, // 16/32 depends on OPSIZE_OVERRIDE
		op1.Decode(addressSize,operandSize,operand);
		disasm=DisassembleTypicalOneOperandAndImm("MOV",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
		disasm+=DisassembleIOLabel(cs.value,eip,symTable,ioTable,EvalUimm8or16or32(operandSize));
		break;

	case I486_OPCODE_MOV_I_TO_EAX: //     0xB8, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_MOV_I_TO_ECX: //     0xB9, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_MOV_I_TO_EDX: //     0xBA, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_MOV_I_TO_EBX: //     0xBB, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_MOV_I_TO_ESP: //     0xBC, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_MOV_I_TO_EBP: //     0xBD, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_MOV_I_TO_ESI: //     0xBE, // 16/32 depends on OPSIZE_OVERRIDE
	case I486_OPCODE_MOV_I_TO_EDI: //     0xBF, // 16/32 depends on OPSIZE_OVERRIDE
		op1.MakeByRegisterNumber(operandSize,opCode&7);
		disasm=DisassembleTypicalOneOperandAndImm("MOV",op1,EvalUimm8or16or32(operandSize),operandSize,cs.value,eip,symTable);
		disasm+=DisassembleIOLabel(cs.value,eip,symTable,ioTable,EvalUimm8or16or32(operandSize));
		break;



	case I486_OPCODE_MOVSB://            0xA4,
		disasm="MOVSB   ";
		if(INST_PREFIX_REP==instPrefix)
		{
			disasm="REP "+disasm;
		}
		else if(INST_PREFIX_REPNE==instPrefix)
		{
			disasm="REPNE(!) "+disasm;
		}
		disasm+=SegmentOverrideSIorESIString(segOverride,addressSize);
		break;
	case I486_OPCODE_MOVS://             0xA5,
		disasm=(16==operandSize ? "MOVSW   " : "MOVSD  ");
		if(INST_PREFIX_REP==instPrefix)
		{
			disasm="REP "+disasm;
		}
		else if(INST_PREFIX_REPNE==instPrefix)
		{
			disasm="REPNE(!) "+disasm;
		}
		disasm+=SegmentOverrideSIorESIString(segOverride,addressSize);
		break;


	case I486_OPCODE_MOVSX_R_RM8://=      0x0FBE,
	case I486_OPCODE_MOVZX_R_RM8://=      0x0FB6,
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=(I486_OPCODE_MOVZX_R_RM8==opCode ? "MOVZX" : "MOVSX");
		cpputil::ExtendString(disasm,8);
		disasm+=op1.Disassemble(cs.value,eip,symTable);
		disasm.push_back(',');
		disasm+=Operand::GetSizeQualifierToDisassembly(op2,8);
		disasm+=SegmentOverrideString(segOverride);
		disasm+=op2.Disassemble(cs.value,eip,symTable);
		break;
	case I486_OPCODE_MOVSX_R32_RM16://=   0x0FBF,
	case I486_OPCODE_MOVZX_R32_RM16://=   0x0FB7,
		disasm=(I486_OPCODE_MOVZX_R32_RM16==opCode ? "MOVZX" : "MOVSX");
		cpputil::ExtendString(disasm,8);
		disasm+=op1.Disassemble(cs.value,eip,symTable);
		disasm.push_back(',');
		disasm+=Operand::GetSizeQualifierToDisassembly(op2,16);
		disasm+=SegmentOverrideString(segOverride);
		disasm+=op2.Disassemble(cs.value,eip,symTable);
		break;


	case I486_OPCODE_RET://              0xC3,
		disasm="RET";
		break;
	case I486_OPCODE_RETF://             0xCB,
		disasm="RETF";
		break;
	case I486_OPCODE_RET_I16://          0xC2,
		disasm="RET";
		cpputil::ExtendString(disasm,8);
		disasm+=cpputil::Ustox(EvalUimm16())+"H";
		break;
	case I486_OPCODE_RETF_I16://         0xCA,
		disasm="RETF";
		cpputil::ExtendString(disasm,8);
		disasm+=cpputil::Ustox(EvalUimm16())+"H";
		break;


	case I486_OPCODE_SAHF://=             0x9E,
		disasm="SAHF";
		break;


	case I486_OPCODE_SHLD_RM_I8://       0x0FA4,
	case I486_OPCODE_SHLD_RM_CL://       0x0FA5,
	case I486_OPCODE_SHRD_RM_I8://       0x0FAC,
	case I486_OPCODE_SHRD_RM_CL://       0x0FAD,
		{
			std::string count;
			if(I486_OPCODE_SHLD_RM_CL==opCode || I486_OPCODE_SHRD_RM_CL==opCode)
			{
				count="CL";
			}
			else
			{
				count=cpputil::Ubtox(EvalUimm8())+"H";
			}
			switch(opCode)
			{
			case I486_OPCODE_SHLD_RM_I8://       0x0FA4,
			case I486_OPCODE_SHLD_RM_CL://       0x0FA5,
				disasm="SHLD    ";
				break;
			case I486_OPCODE_SHRD_RM_I8://       0x0FAC,
			case I486_OPCODE_SHRD_RM_CL://       0x0FAD,
				disasm="SHRD    ";
				break;
			}
			disasm+=op1.Disassemble(cs.value,eip,symTable)+",";
			disasm+=op2.Disassemble(cs.value,eip,symTable)+",";
			disasm+=count;
		}
		break;


	case I486_OPCODE_SCASB://            0xAE,
		disasm="SCASB";
		if(instPrefix==INST_PREFIX_REPE)
		{
			disasm="REPE "+disasm;
		}
		else if(instPrefix==INST_PREFIX_REPNE)
		{
			disasm="REPNE "+disasm;
		}
		break;
	case I486_OPCODE_SCAS://             0xAF,
		disasm=(16==operandSize ? "SCASW" : "SCASD");
		if(instPrefix==INST_PREFIX_REPE)
		{
			disasm="REPE "+disasm;
		}
		else if(instPrefix==INST_PREFIX_REPNE)
		{
			disasm="REPNE "+disasm;
		}
		break;


	case I486_OPCODE_SETA://             0x0F97,
		disasm=DisassembleTypicalOneOperand("SETA",op1,8,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SETAE://            0x0F93,
		disasm=DisassembleTypicalOneOperand("SETAE",op1,8,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SETB://             0x0F92,
		disasm=DisassembleTypicalOneOperand("SETB",op1,8,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SETBE://            0x0F96,
		disasm=DisassembleTypicalOneOperand("SETBE",op1,8,cs.value,eip,symTable);
		break;
	// I486_OPCODE_SETC://             0x0F92,
	case I486_OPCODE_SETE://             0x0F94,
		disasm=DisassembleTypicalOneOperand("SETE",op1,8,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SETG://             0x0F9F,
		disasm=DisassembleTypicalOneOperand("SETG",op1,8,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SETGE://            0x0F9D,
		disasm=DisassembleTypicalOneOperand("SETGE",op1,8,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SETL://             0x0F9C,
		disasm=DisassembleTypicalOneOperand("SETL",op1,8,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SETLE://            0x0F9E,
		disasm=DisassembleTypicalOneOperand("SETLE",op1,8,cs.value,eip,symTable);
		break;
	//I486_OPCODE_SETNA://            0x0F96,
	//I486_OPCODE_SETNAE://           0x0F92,
	//I486_OPCODE_SETNB://            0x0F93,
	//I486_OPCODE_SETNBE://           0x0F97,
	//I486_OPCODE_SETNC://            0x0F93,
	case I486_OPCODE_SETNE://            0x0F95,
		disasm=DisassembleTypicalOneOperand("SETNE",op1,8,cs.value,eip,symTable);
		break;
	//I486_OPCODE_SETNG://            0x0F9E,
	//I486_OPCODE_SETNGE://           0x0F9C,
	//I486_OPCODE_SETNL://            0x0F9D,
	//I486_OPCODE_SETNLE://           0x0F9F,
	case I486_OPCODE_SETNO://            0x0F91,
		disasm=DisassembleTypicalOneOperand("SETNO",op1,8,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SETNP://            0x0F9B,
		disasm=DisassembleTypicalOneOperand("SETNP",op1,8,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SETNS://            0x0F99,
		disasm=DisassembleTypicalOneOperand("SETNS",op1,8,cs.value,eip,symTable);
		break;
	// I486_OPCODE_SETNZ://            0x0F95,
	case I486_OPCODE_SETO://             0x0F90,
		disasm=DisassembleTypicalOneOperand("SETO",op1,8,cs.value,eip,symTable);
		break;
	case I486_OPCODE_SETP://             0x0F9A,
		disasm=DisassembleTypicalOneOperand("SETP",op1,8,cs.value,eip,symTable);
		break;
	//I486_OPCODE_SETPE://            0x0F9A,
	//I486_OPCODE_SETPO://            0x0F9B,
	case I486_OPCODE_SETS://             0x0F98,
		disasm=DisassembleTypicalOneOperand("SETS",op1,8,cs.value,eip,symTable);
		break;
	// I486_OPCODE_SETZ://             0x0F94,


	case I486_OPCODE_SLDT_STR_LLDT_LTR_VERR_VERW://             0x0F00,
		switch(GetREG())
		{
		case 0:
			disasm=DisassembleTypicalOneOperand("SLDT",op1,16,cs.value,eip,symTable);
			break;
		case 1:
			disasm=DisassembleTypicalOneOperand("STR",op1,16,cs.value,eip,symTable);
			break;
		case 2:
			disasm=DisassembleTypicalOneOperand("LLDT",op1,16,cs.value,eip,symTable);
			break;
		case 3:
			disasm=DisassembleTypicalOneOperand("LTR",op1,16,cs.value,eip,symTable);
			break;
		case 4:
			disasm=DisassembleTypicalOneOperand("VERR",op1,16,cs.value,eip,symTable);
			break;
		case 5:
			disasm=DisassembleTypicalOneOperand("VERW",op1,16,cs.value,eip,symTable);
			break;
		}
		break;


	case I486_OPCODE_STC://              0xF9,
		disasm="STC";
		break;
	case I486_OPCODE_STD://              0xFD,
		disasm="STD";
		break;
	case I486_OPCODE_STI://              0xFB,
		disasm="STI";
		break;


	case I486_OPCODE_STOSB://            0xAA,
		disasm="STOSB";
		if(INST_PREFIX_REP==instPrefix)
		{
			disasm="REP "+disasm;
		}
		else if(INST_PREFIX_REPNE==instPrefix)
		{
			disasm="REPNE(!) "+disasm;
		}
		break;
	case I486_OPCODE_STOS://             0xAB,
		if(16==operandSize)
		{
			disasm="STOSW";
		}
		else
		{
			disasm="STOSD";
		}
		if(INST_PREFIX_REP==instPrefix)
		{
			disasm="REP "+disasm;
		}
		else if(INST_PREFIX_REPNE==instPrefix)
		{
			disasm="REPNE(!) "+disasm;
		}
		break;


	case I486_OPCODE_NOP://              0x90,
		disasm="NOP";
		break;


	case I486_OPCODE_OUT_I8_AL: //        0xE6,
		disasm="OUT";
		cpputil::ExtendString(disasm,8);
		disasm+=cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=",AL";
		{
			auto found=ioTable.find(EvalUimm8());
			if(ioTable.end()!=found)
			{
				disasm+=" (";
				disasm+=found->second;
				disasm+=")";
			}
		}
		break;
	case I486_OPCODE_OUT_I8_A: //         0xE7,
		disasm="OUT";
		cpputil::ExtendString(disasm,8);
		disasm+=cpputil::Ubtox(EvalUimm8())+"H";
		if(16==operandSize)
		{
			disasm+=",AX";
		}
		else
		{
			disasm+=",EAX";
		}
		{
			auto found=ioTable.find(EvalUimm8());
			if(ioTable.end()!=found)
			{
				disasm+=" (";
				disasm+=found->second;
				disasm+=")";
			}
		}
		break;
	case I486_OPCODE_OUT_DX_AL: //        0xEE,
		disasm="OUT     DX,AL";
		break;
	case I486_OPCODE_OUT_DX_A: //         0xEF,
		if(16==operandSize)
		{
			disasm="OUT     DX,AX";
		}
		else
		{
			disasm="OUT     DX,EAX";
		}
		break;


	case I486_OPCODE_OUTSB://            0x6E,
		disasm="OUTSB   ";
		if(INST_PREFIX_REP==instPrefix)
		{
			disasm="REP "+disasm;
		}
		else if(INST_PREFIX_REPNE==instPrefix)
		{
			disasm="REPNE(!) "+disasm;
		}
		disasm+=SegmentOverrideSIorESIString(segOverride,addressSize);
		break;
	case I486_OPCODE_OUTS://             0x6F,
		disasm=(16==operandSize ? "OUTSW   " : "OUTSD   ");
		if(INST_PREFIX_REP==instPrefix)
		{
			disasm="REP "+disasm;
		}
		else if(INST_PREFIX_REPNE==instPrefix)
		{
			disasm="REPNE(!) "+disasm;
		}
		disasm+=SegmentOverrideSIorESIString(segOverride,addressSize);
		break;


	case I486_OPCODE_PUSHA://            0x60,
		disasm=(16==operandSize ? "PUSHA" : "PUSHAD");
		break;
	case I486_OPCODE_PUSHF://            0x9C,
		disasm=(16==operandSize ? "PUSHF" : "PUSHFD");
		break;


	case I486_OPCODE_PUSH_EAX://         0x50,
	case I486_OPCODE_PUSH_ECX://         0x51,
	case I486_OPCODE_PUSH_EDX://         0x52,
	case I486_OPCODE_PUSH_EBX://         0x53,
	case I486_OPCODE_PUSH_ESP://         0x54,
	case I486_OPCODE_PUSH_EBP://         0x55,
	case I486_OPCODE_PUSH_ESI://         0x56,
	case I486_OPCODE_PUSH_EDI://         0x57,
		if(16==operandSize)
		{
			disasm="PUSH    ";
			disasm+=Reg16Str[opCode&7];
		}
		else
		{
			disasm="PUSH    ";
			disasm+=Reg32Str[opCode&7];
		}
		break;
	case I486_OPCODE_PUSH_I8://          0x6A,
		disasm="PUSH    ";
		if(16==operandSize)
		{
			disasm+="WORD PTR ";
		}
		else
		{
			disasm+="DWORD PTR ";
		}
		disasm+=cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm8())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm8(),1);
		disasm+=DisassembleIOLabel(cs.value,eip,symTable,ioTable,EvalUimm8());
		break;
	case I486_OPCODE_PUSH_I://           0x68,
		disasm="PUSH    ";
		if(16==operandSize)
		{
			disasm+="WORD PTR ";
			disasm+=cpputil::Ustox(EvalUimm16())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm16())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm16(),2);;
			disasm+=DisassembleIOLabel(cs.value,eip,symTable,ioTable,EvalUimm16());
		}
		else
		{
			disasm+="DWORD PTR ";
			disasm+=cpputil::Uitox(EvalUimm32())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm32())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm32(),4);
			disasm+=DisassembleIOLabel(cs.value,eip,symTable,ioTable,EvalUimm32());
		}
		break;
	case I486_OPCODE_PUSH_CS://          0x0E,
		disasm="PUSH    CS";
		break;
	case I486_OPCODE_PUSH_SS://          0x16,
		disasm="PUSH    SS";
		break;
	case I486_OPCODE_PUSH_DS://          0x1E,
		disasm="PUSH    DS";
		break;
	case I486_OPCODE_PUSH_ES://          0x06,
		disasm="PUSH    ES";
		break;
	case I486_OPCODE_PUSH_FS://          0x0FA0,
		disasm="PUSH    FS";
		break;
	case I486_OPCODE_PUSH_GS://          0x0FA8,
		disasm="PUSH    GS";
		break;


	case I486_OPCODE_POP_M://            0x8F,
		disasm=DisassembleTypicalOneOperand("POP",op1,operandSize,cs.value,eip,symTable);
		break;
	case I486_OPCODE_POP_EAX://          0x58,
	case I486_OPCODE_POP_ECX://          0x59,
	case I486_OPCODE_POP_EDX://          0x5A,
	case I486_OPCODE_POP_EBX://          0x5B,
	case I486_OPCODE_POP_ESP://          0x5C,
	case I486_OPCODE_POP_EBP://          0x5D,
	case I486_OPCODE_POP_ESI://          0x5E,
	case I486_OPCODE_POP_EDI://          0x5F,
		if(16==operandSize)
		{
			disasm="POP     ";
			disasm+=Reg16Str[opCode&7];
		}
		else
		{
			disasm="POP     ";
			disasm+=Reg32Str[opCode&7];
		}
		break;
	case I486_OPCODE_POP_SS://           0x17,
		disasm="POP     SS";
		break;
	case I486_OPCODE_POP_DS://           0x1F,
		disasm="POP     DS";
		break;
	case I486_OPCODE_POP_ES://           0x07,
		disasm="POP     ES";
		break;
	case I486_OPCODE_POP_FS://           0x0FA1,
		disasm="POP     FS";
		break;
	case I486_OPCODE_POP_GS://           0x0FA9,
		disasm="POP     GS";
		break;


	case I486_OPCODE_POPA://             0x61,
		switch(operandSize)
		{
		case 16:
			disasm="POPA";
			break;
		case 32:
			disasm="POPAD";
			break;
		}
		break;
	case I486_OPCODE_POPF://             0x9D,
		switch(operandSize)
		{
		case 16:
			disasm="POPF";
			break;
		case 32:
			disasm="POPFD";
			break;
		}
		break;


	case I486_OPCODE_OR_AL_FROM_I8:
		disasm="OR      AL,"+cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm8())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm8(),1);
		break;
	case I486_OPCODE_OR_A_FROM_I:
		if(16==operandSize)
		{
			disasm="OR      AX,"+cpputil::Ustox(EvalUimm16())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm16())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm16(),2);
		}
		else
		{
			disasm="OR      EAX,"+cpputil::Uitox(EvalUimm32())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm32())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm32(),4);
		}
		break;
	case I486_OPCODE_OR_RM8_FROM_R8:
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("OR",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_OR_R8_FROM_RM8:
		op1.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("OR",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_OR_RM_FROM_R:
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("OR",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_OR_R_FROM_RM:
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("OR",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_XOR_AL_FROM_I8:
		disasm="XOR     AL,"+cpputil::Ubtox(EvalUimm8())+"H";
		disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm8())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm8(),1);
		break;
	case I486_OPCODE_XOR_A_FROM_I:
		if(16==operandSize)
		{
			disasm="XOR     AX,"+cpputil::Ustox(EvalUimm16())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm16())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm16(),2);
		}
		else
		{
			disasm="XOR     EAX,"+cpputil::Uitox(EvalUimm32())+"H";
			disasm+=symTable.FormatImmLabel(cs.value,eip,EvalUimm32())+DisassembleImmAsASCII(cs.value,eip,symTable,EvalUimm32(),4);
		}
		break;
	case I486_OPCODE_XOR_RM8_FROM_R8:
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("XOR",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_XOR_R8_FROM_RM8:
		op1.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("XOR",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_XOR_RM_FROM_R:
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("XOR",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_XOR_R_FROM_RM:
		op1.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("XOR",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_XCHG_EAX_ECX://     0x91,
	case I486_OPCODE_XCHG_EAX_EDX://     0x92,
	case I486_OPCODE_XCHG_EAX_EBX://     0x93,
	case I486_OPCODE_XCHG_EAX_ESP://     0x94,
	case I486_OPCODE_XCHG_EAX_EBP://     0x95,
	case I486_OPCODE_XCHG_EAX_ESI://     0x96,
	case I486_OPCODE_XCHG_EAX_EDI://     0x97,
		if(16==operandSize)
		{
			disasm="XCHG    AX,";
			disasm+=Reg16Str[opCode&7];
		}
		else
		{
			disasm="XCHG    EAX,";
			disasm+=Reg32Str[opCode&7];
		}
		break;
	case I486_OPCODE_XCHG_RM8_R8://           0x86,
		op2.DecodeMODR_MForRegister(8,operand[0]);
		disasm=DisassembleTypicalTwoOperands("XCHG",op1,op2,cs.value,eip,symTable);
		break;
	case I486_OPCODE_XCHG_RM_R://             0x87,
		op2.DecodeMODR_MForRegister(operandSize,operand[0]);
		disasm=DisassembleTypicalTwoOperands("XCHG",op1,op2,cs.value,eip,symTable);
		break;


	case I486_OPCODE_XLAT://             0xD7,
		{
			disasm="XLAT    ";
			disasm+=SegmentOverrideString(segOverride);
			if(16==addressSize)
			{
				disasm+="[BX]";
			}
			else
			{
				disasm+="[EBX]";
			}
		}
		break;

	case I486_OPCODE_BSWAP_EAX:
		disasm="BSWAP EAX";
		break;
	case I486_OPCODE_BSWAP_ECX:
		disasm="BSWAP ECX";
		break;
	case I486_OPCODE_BSWAP_EDX:
		disasm="BSWAP EDX";
		break;
	case I486_OPCODE_BSWAP_EBX:
		disasm="BSWAP EBX";
		break;
	case I486_OPCODE_BSWAP_ESP:
		disasm="BSWAP ESP";
		break;
	case I486_OPCODE_BSWAP_EBP:
		disasm="BSWAP EBP";
		break;
	case I486_OPCODE_BSWAP_ESI:
		disasm="BSWAP ESI";
		break;
	case I486_OPCODE_BSWAP_EDI:
		disasm="BSWAP EDI";
		break;
	}

	if(INST_PREFIX_LOCK==instPrefix)
	{
		disasm="LOCK "+disasm;
	}

	{
		auto *sym=symTable.Find(cs.value,eip);
		if(nullptr!=sym && 0<sym->inLineComment.size())
		{
			for(auto i=disasm.size(); i<19; ++i)
			{
				disasm.push_back(' ');
			}
			disasm.push_back(' ');
			disasm.push_back(';');
			disasm.push_back(' ');
			disasm+=sym->inLineComment;
		}
	}

	return disasm;
}

std::string i486DXCommon::Instruction::DisassembleTypicalOneOperand(std::string inst,const Operand &op,int operandSize,uint32_t cs,uint32_t eip,const i486SymbolTable &symTable) const
{
	auto sizeQual=i486DXCommon::Operand::GetSizeQualifierToDisassembly(op,operandSize);
	auto segQual=i486DXCommon::Operand::GetSegmentQualifierToDisassembly(segOverride,op);
	auto disasm=inst;
	cpputil::ExtendString(disasm,8);
	disasm+=sizeQual+segQual+op.Disassemble(cs,eip,symTable);
	return disasm;
}

std::string i486DXCommon::Instruction::DisassembleTypicalOneOperandAndImm(std::string inst,const Operand &op,unsigned int imm,int operandSize,uint32_t cs,uint32_t eip,const i486SymbolTable &symTable) const
{
	auto sizeQual=i486DXCommon::Operand::GetSizeQualifierToDisassembly(op,operandSize);
	auto segQual=i486DXCommon::Operand::GetSegmentQualifierToDisassembly(segOverride,op);
	auto disasm=inst;
	cpputil::ExtendString(disasm,8);
	disasm+=sizeQual+segQual+op.Disassemble(cs,eip,symTable)+",";
	switch(operandSize)
	{
	case 8:
		disasm+=cpputil::Ubtox(imm)+"H"+symTable.FormatImmLabel(cs,eip,imm)+DisassembleImmAsASCII(cs,eip,symTable,imm,1);
		break;
	case 16:
		disasm+=cpputil::Ustox(imm)+"H"+symTable.FormatImmLabel(cs,eip,imm)+DisassembleImmAsASCII(cs,eip,symTable,imm,2);
		break;
	default:
		disasm+=cpputil::Uitox(imm)+"H"+symTable.FormatImmLabel(cs,eip,imm)+DisassembleImmAsASCII(cs,eip,symTable,imm,4);
		break;
	}
	return disasm;
}

std::string i486DXCommon::Instruction::DisassembleTypicalOneImm(std::string inst,unsigned int imm,int operandSize,uint32_t cs,uint32_t eip,const i486SymbolTable &symTable) const
{
	auto disasm=inst;
	cpputil::ExtendString(disasm,8);
	switch(operandSize)
	{
	case 8:
		disasm+=cpputil::Ubtox(imm)+"H"+symTable.FormatImmLabel(cs,eip,imm)+DisassembleImmAsASCII(cs,eip,symTable,imm,1);
		break;
	case 16:
		disasm+=cpputil::Ustox(imm)+"H"+symTable.FormatImmLabel(cs,eip,imm)+DisassembleImmAsASCII(cs,eip,symTable,imm,2);
		break;
	default:
	case 32:
		disasm+=cpputil::Uitox(imm)+"H"+symTable.FormatImmLabel(cs,eip,imm)+DisassembleImmAsASCII(cs,eip,symTable,imm,4);
		break;
	}
	return disasm;
}

std::string i486DXCommon::Instruction::DisassembleTypicalRM8_I8(std::string inst,const Operand &op1,unsigned int I8,uint32_t cs,uint32_t eip,const i486SymbolTable &symTable) const
{
	auto sizeQual=i486DXCommon::Operand::GetSizeQualifierToDisassembly(op1,8);
	auto segQual=i486DXCommon::Operand::GetSegmentQualifierToDisassembly(segOverride,op1);
	auto disasm=inst;
	cpputil::ExtendString(disasm,8);
	disasm+=sizeQual+segQual+op1.Disassemble(cs,eip,symTable)+","+cpputil::Ubtox(I8)+"H"+symTable.FormatImmLabel(cs,eip,I8)+DisassembleImmAsASCII(cs,eip,symTable,I8,1);
	return disasm;
}

std::string i486DXCommon::Instruction::DisassembleTypicalRM_I8(std::string inst,const Operand &op1,unsigned int I8,uint32_t cs,uint32_t eip,const i486SymbolTable &symTable) const
{
	auto sizeQual=i486DXCommon::Operand::GetSizeQualifierToDisassembly(op1,operandSize);
	auto segQual=i486DXCommon::Operand::GetSegmentQualifierToDisassembly(segOverride,op1);
	auto disasm=inst;
	cpputil::ExtendString(disasm,8);
	disasm+=sizeQual+segQual+op1.Disassemble(cs,eip,symTable)+","+cpputil::Ubtox(I8)+"H"+symTable.FormatImmLabel(cs,eip,I8)+DisassembleImmAsASCII(cs,eip,symTable,I8,1);
	return disasm;
}

std::string i486DXCommon::Instruction::DisassembleTypicalTwoOperands(std::string inst,const Operand &op1,const Operand &op2,uint32_t cs,uint32_t eip,const i486SymbolTable &symTable) const
{
	std::string disasm=inst,op1SizeQual,op2SizeQual,op1SegQual,op2SegQual;
	cpputil::ExtendString(disasm,8);

	op1SegQual=i486DXCommon::Operand::GetSegmentQualifierToDisassembly(segOverride,op1);
	op2SegQual=i486DXCommon::Operand::GetSegmentQualifierToDisassembly(segOverride,op2);
	disasm+=op1SizeQual+op1SegQual+op1.Disassemble(cs,eip,symTable);
	disasm.push_back(',');
	disasm+=op2SizeQual+op2SegQual+op2.Disassemble(cs,eip,symTable);

	return disasm;
}

std::string i486DXCommon::Instruction::DisassembleIOLabel(unsigned int CS,unsigned int EIP,const i486SymbolTable &symTable,const std::map <unsigned int,std::string> &ioTable,unsigned int imm) const
{
	std::string disasm;
	auto symbolPtr=symTable.Find(CS,EIP);
	if(nullptr!=symbolPtr && true==symbolPtr->immIsIOAddr)
	{
		auto found=ioTable.find(imm);
		if(ioTable.end()!=found)
		{
			disasm+=" (";
			disasm+=found->second;
			disasm+=")";
		}
	}
	return disasm;
}

std::string i486DXCommon::Instruction::DisassembleImmAsASCII(unsigned int CS,unsigned int EIP,const i486SymbolTable &symTable,unsigned int imm,unsigned int numBytes) const
{
	std::string disasm;
	auto symbolPtr=symTable.Find(CS,EIP);
	if(nullptr!=symbolPtr && true==symbolPtr->immIsASCII)
	{
		disasm+="(\'";
		for(unsigned int i=0; i<numBytes; ++i)
		{
			unsigned int asc=(imm&0xFF);
			imm>>=8;
			if(' '<=asc && asc<0x80)
			{
				disasm.push_back(asc);
			}
			else
			{
				disasm.push_back(' ');
			}
		}
		disasm+="\')";
	}
	return disasm;
}

/* static */ std::string i486DXCommon::Get8BitRegisterNameFromMODR_M(unsigned char MOD_RM)
{
	auto REG_OPCODE=((MOD_RM>>3)&7);
	return Reg8Str[REG_OPCODE];
}
/* static */ std::string i486DXCommon::Get16BitRegisterNameFromMODR_M(unsigned char MOD_RM)
{
	auto REG_OPCODE=((MOD_RM>>3)&7);
	return Reg16Str[REG_OPCODE];
}
/* static */ std::string i486DXCommon::Get32BitRegisterNameFromMODR_M(unsigned char MOD_RM)
{
	auto REG_OPCODE=((MOD_RM>>3)&7);
	return Reg32Str[REG_OPCODE];
}
/* static */ std::string i486DXCommon::Get16or32BitRegisterNameFromMODR_M(int dataSize,unsigned char MOD_RM)
{
	if(16==dataSize)
	{
		auto REG_OPCODE=((MOD_RM>>3)&7);
		return Reg16Str[REG_OPCODE];
	}
	else
	{
		auto REG_OPCODE=((MOD_RM>>3)&7);
		return Reg32Str[REG_OPCODE];
	}
}
